package com.GASB.anti_malware.service;
import com.GASB.anti_malware.domain.VtReport;
import com.GASB.anti_malware.repository.VtReportRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
public class VtReportReturnServiceTest {

        private VtReportReturnService vtReportReturnService;

        @Mock
        private VtReportRepository vtReportRepository;

        @BeforeEach
        public void setUp() {
            MockitoAnnotations.openMocks(this);
            vtReportReturnService = new VtReportReturnService(vtReportRepository);
        }

        @Test
        public void testGetReportById_Exists() {
            // Mock 데이터 설정
            long fileId = 123;
            VtReport mockReport = createMockReport();

            // Mock Repository의 동작 설정
            when(vtReportRepository.findById(fileId)).thenReturn(Optional.of(mockReport));

            // Service 메서드 호출
            VtReport result = vtReportReturnService.getReportById(fileId);

            // 결과 검증
            assertEquals(mockReport, result);
        }

        @Test
        public void testGetReportById_NotExists() {
            // Mock 데이터 설정
            long fileId = 456;

            // Mock Repository의 동작 설정
            when(vtReportRepository.findById(fileId)).thenReturn(Optional.empty());

            // Service 메서드 호출
            VtReport result = vtReportReturnService.getReportById(fileId);

            // 결과 검증
            assertEquals(null, result); // 또는 Optional.empty() 반환을 기대하는 방식으로 검증할 수도 있습니다.
        }

        private VtReport createMockReport() {
            return VtReport.builder()
                    .file_id(123L)
                    .type("test")
                    .V3("v3_result")
                    .ALYac("alyac_result")
                    .Kaspersky("kaspersky_result")
                    .Falcon("falcon_result")
                    .Avast("avast_result")
                    .Sentinelone("sentinelone_result")
                    .detect_engine(1)
                    .complete_engine(2)
                    .score(80)
                    .threat_label("malware")
                    .report_url("http://example.com/report/123")
                    .build();
        }
    }

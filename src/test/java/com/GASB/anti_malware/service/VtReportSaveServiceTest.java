package com.GASB.anti_malware.service;
import com.GASB.anti_malware.domain.VtReport;
import com.GASB.anti_malware.repository.VtReportRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;


public class VtReportSaveServiceTest {

        @Mock
        private VtReportRepository reportRepository;

        @InjectMocks
        private VtReportSaveService vtReportSaveService ;

        @BeforeEach
        public void setUp() {
            MockitoAnnotations.initMocks(this);
        }

        @Test
        public void testSaveReportToDatabase() {
            // 임의의 테스트 데이터 설정
            String hash = "543ff21b1a7dcd15d8d8c202218e9d16dca228867df16c77df0aa5982f2de27e";
            String response = "{ \"data\": { \"attributes\": { \"last_analysis_results\": { \"ALYac\": { \"category\": \"malicious\", \"result\": \"malware\" } }, \"last_analysis_stats\": { \"malicious\": 1, \"suspicious\": 0, \"undetected\": 0, \"harmless\": 0 }, \"attribute\": { \"popular_threat_category\": { \"suggested_threat_label\": \"malicious\" }, \"type_extension\": \"exe\" } } } }";

            // 테스트할 메소드 호출
            vtReportSaveService.saveReportToDatabase(hash, response);

            // save 메소드가 한 번 호출되었는지 확인
            verify(reportRepository, times(1)).save(any(VtReport.class));
        }

        // 추가적인 테스트 케이스를 작성할 수 있음
    }



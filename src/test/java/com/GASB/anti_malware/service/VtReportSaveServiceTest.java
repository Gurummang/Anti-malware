package com.GASB.anti_malware.service;

import com.GASB.anti_malware.model.entity.StoredFile;
import com.GASB.anti_malware.model.entity.VtReport;
import com.GASB.anti_malware.repository.StoredFileRepository;
import com.GASB.anti_malware.repository.VtReportRepository;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.modelmapper.ModelMapper;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class VtReportSaveServiceTest {

        @Mock
        private RestTemplate restTemplate;

        @Mock
        private VtReportRepository reportRepository;

        @Mock
        private StoredFileRepository storedFileRepository;

        @Mock
        private ModelMapper modelMapper;

        @InjectMocks
        private VtReportSaveService vtReportSaveService;

        private ObjectMapper objectMapper = new ObjectMapper();

        @BeforeEach
        void setUp() {
            vtReportSaveService = new VtReportSaveService(restTemplate, reportRepository, storedFileRepository, modelMapper);
        }

        @Test
        void testSaveReportById_success() throws IOException {
            long fileId = 123L;
            String hash = "sampleHash";
            String jsonResponse = "{ \"data\": { \"attributes\": { \"type_extension\": \"type\", \"last_analysis_stats\": { \"malicious\": 5, \"suspicious\": 2, \"undetected\": 10, \"harmless\": 3 }, \"popular_threat_category\": { \"suggested_threat_label\": \"malware\" }, \"last_analysis_results\": { \"AhnLab-V3\": { \"category\": \"malicious\", \"result\": \"Malware\" }, \"ALYac\": { \"category\": \"undetected\" } } } } }";

            StoredFile storedFile = StoredFile.builder()
                    .id(fileId)
                    .SaltedHash(hash)
                    .size(100)
                    .type("application")
                    .SavePath("/path/to/file")
                    .build();

            when(storedFileRepository.findById(fileId)).thenReturn(storedFile);
            when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                    .thenReturn(ResponseEntity.ok(jsonResponse));
            doAnswer(invocation -> {
                VtReport vtReport = invocation.getArgument(0);
                assertEquals(storedFile, vtReport.getStoredFile());
                assertEquals("type", vtReport.getType());
                assertEquals(7, vtReport.getDetectEngine());
                assertEquals(20, vtReport.getCompleteEngine());
                assertEquals(35, vtReport.getScore());
                assertEquals("malware", vtReport.getThreatLabel());
                return null;
            }).when(reportRepository).save(any(VtReport.class));

            String result = vtReportSaveService.saveReportById(fileId);

            assertEquals("report saved in database", result);

            verify(storedFileRepository, times(1)).findById(fileId);
            verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class));
            verify(reportRepository, times(1)).save(any(VtReport.class));
        }

        @Test
        void testSaveReportById_fileNotFound() {
            long fileId = 123L;

            when(storedFileRepository.findById(fileId)).thenReturn(null);

            String result = vtReportSaveService.saveReportById(fileId);

            assertEquals("Error: File with id " + fileId + " not found", result);

            verify(storedFileRepository, times(1)).findById(fileId);
            verify(restTemplate, never()).exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), eq(String.class));
            verify(reportRepository, never()).save(any(VtReport.class));
        }

        @Test
        void testSaveReportById_httpError() {
            long fileId = 123L;
            String hash = "sampleHash";

            StoredFile storedFile = StoredFile.builder()
                    .id(fileId)
                    .SaltedHash(hash)
                    .size(100)
                    .type("application")
                    .SavePath("/path/to/file")
                    .build();

            when(storedFileRepository.findById(fileId)).thenReturn(storedFile);
            when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                    .thenThrow(new HttpClientErrorException(HttpStatus.BAD_REQUEST));

            String result = vtReportSaveService.saveReportById(fileId);

            assertTrue(result.contains("400 BAD_REQUEST"));

            verify(storedFileRepository, times(1)).findById(fileId);
            verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class));
            verify(reportRepository, never()).save(any(VtReport.class));
        }
    }


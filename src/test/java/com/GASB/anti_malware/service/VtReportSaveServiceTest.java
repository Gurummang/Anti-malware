package com.GASB.anti_malware.service;

import com.GASB.anti_malware.domain.StoredFile;
import com.GASB.anti_malware.domain.VtReport;
import com.GASB.anti_malware.repository.StoredFileRepository;
import com.GASB.anti_malware.repository.VtReportRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

public class VtReportSaveServiceTest {

    private VtReportSaveService vtReportSaveService;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private VtReportRepository reportRepository;

    @Mock
    private StoredFileRepository storedFileRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        vtReportSaveService = new VtReportSaveService(restTemplate, reportRepository, storedFileRepository);
    }

    @Test
    public void testGetHashByFileId_Success() {
        long fileId = 123;
        StoredFile storedFile = createMockStoredFile(fileId);

        when(storedFileRepository.findById(fileId)).thenReturn(storedFile);

        String result = vtReportSaveService.getHashByFileId(fileId);

        assertEquals("mocked_salted_hash", result);
    }

    @Test
    public void testGetHashByFileId_FileNotFound() {
        long fileId = 456;

        when(storedFileRepository.findById(fileId)).thenReturn(null);

        String result = vtReportSaveService.getHashByFileId(fileId);

        assertEquals("Error: File with id " + fileId + " not found", result);
    }

    @Test
    public void testGetReport_Success() {
        // Mock 데이터 설정
        long fileId = 1L;
        StoredFile storedFile = createMockStoredFile(fileId);
        String expectedUrl = "https://www.virustotal.com/api/v3/files/" + storedFile.getSaltedHash();
        String mockedResponse = "{ \"data\": { \"attributes\": { \"type_extension\": \"exe\" } } }";

        // Mock StoredFileRepository의 동작 설정
        when(storedFileRepository.findById(fileId)).thenReturn(storedFile);

        // Mock RestTemplate의 동작 설정
        HttpHeaders headers = new HttpHeaders();
        headers.set("accept", "application/json");
        headers.set("x-apikey", "mocked_api_key");
        ResponseEntity<String> mockResponseEntity = new ResponseEntity<>(mockedResponse, HttpStatus.OK);
        when(restTemplate.exchange(eq(expectedUrl), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                .thenReturn(mockResponseEntity);

        // Service 메서드 호출
        String result = vtReportSaveService.getReport(storedFile.getSaltedHash());

        // 결과 검증
        assertEquals("report saved in database", result);
        verify(reportRepository, times(1)).save(any(VtReport.class));
    }

    @Test
    public void testGetReport_NotFound() {
        // Mock 데이터 설정
        long fileId = 2L;
        StoredFile storedFile = createMockStoredFile(fileId);
        String expectedUrl = "https://www.virustotal.com/api/v3/files/" + storedFile.getSaltedHash();

        // Mock StoredFileRepository의 동작 설정
        when(storedFileRepository.findById(fileId)).thenReturn(storedFile);

        // Mock RestTemplate의 동작 설정 (HTTP 404 Not Found 응답)
        HttpHeaders headers = new HttpHeaders();
        headers.set("accept", "application/json");
        headers.set("x-apikey", "mocked_api_key");
        when(restTemplate.exchange(eq(expectedUrl), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND, "file not found"));

        // Service 메서드 호출 및 예외 처리
        String result = vtReportSaveService.getReport(storedFile.getSaltedHash());

        // 결과 검증
        assertTrue(result.contains("file not found"));
        verify(reportRepository, never()).save(any(VtReport.class));
    }


    private StoredFile createMockStoredFile(long fileId) {
        return StoredFile.builder()
                .id(fileId)
                .SaltedHash("mocked_salted_hash")
                .size(1024)
                .type("exe")
                .SavePath("/path/to/file")
                .build();
    }
}

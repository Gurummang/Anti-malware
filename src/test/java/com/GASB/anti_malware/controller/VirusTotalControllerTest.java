package com.GASB.anti_malware.controller;
import com.GASB.anti_malware.controller.VirusTotalController;
import com.GASB.anti_malware.domain.VtReport;
import com.GASB.anti_malware.service.VtReportReturnService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class VirusTotalControllerTest {

    private VirusTotalController virusTotalController;

    @Mock
    private VtReportReturnService vtReportReturnService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        virusTotalController = new VirusTotalController(vtReportReturnService);
    }

    @Test
    public void testGetReportSuccess() throws Exception {
        // Mock 데이터 설정
        int fileId = 123;
        VtReport mockReport = createMockReport();

        // Mock Service의 동작 설정
        when(vtReportReturnService.getReportById(fileId)).thenReturn(mockReport);

        // Controller의 메서드 호출
        ResponseEntity<?> responseEntity = virusTotalController.getReport(fileId);

        // 응답 검증
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        ObjectMapper objectMapper = new ObjectMapper();
        String expectedJson = objectMapper.writeValueAsString(mockReport);
        assertEquals(expectedJson, responseEntity.getBody());
    }

    @Test
    public void testGetReportNotFound() throws Exception {

        int fileId = 456;


        when(vtReportReturnService.getReportById(fileId)).thenReturn(null);


        ResponseEntity<?> responseEntity = virusTotalController.getReport(fileId);


        assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());
        assertEquals("{\"status\":\"error\",\"message\":\"Report not found\"}", responseEntity.getBody());
    }

    private VtReport createMockReport() {
        return VtReport.builder()
                .file_id(123L)
                .type("test")
                .V3("v3_result")
                .ALYac("alyac_result")
                .Kaspersky("kaspersky_result")
                .Falcon("falcon_result")
                .Avast("avast_result")
                .Sentinelone("sentinelone_result")
                .detect_engine(1)
                .complete_engine(2)
                .score(80)
                .threat_label("malware")
                .report_url("http://example.com/report/123")
                .build();
    }
}

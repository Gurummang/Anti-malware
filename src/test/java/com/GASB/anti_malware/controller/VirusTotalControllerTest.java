package com.GASB.anti_malware.controller;

import com.GASB.anti_malware.controller.dto.ResponseDto;
import com.GASB.anti_malware.controller.dto.VtReportDto;
import com.GASB.anti_malware.domain.VtReport;
import com.GASB.anti_malware.service.VtReportReturnService;
import com.GASB.anti_malware.service.VtReportSaveService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import static org.mockito.Mockito.when;
import static org.mockito.ArgumentMatchers.anyLong;

@WebMvcTest(controllers = VirusTotalController.class)
public class VirusTotalControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private VtReportReturnService vtReportReturnService;

    @MockBean
    private VtReportSaveService vtReportSaveService;

    @BeforeEach
    void setUp() {
        // Mock 데이터 설정
        VtReportDto mockReportDto = VtReportDto.builder()
                .fileId(1L)
                .type("type")
                .alyac("clean")
                .v3("clean")
                .kaspersky("clean")
                .falcon("clean")
                .avast("clean")
                .sentinelone("clean")
                .detectEngine(5)
                .completeEngine(5)
                .score(100)
                .threatLabel("none")
                .reportUrl("http://example.com")
                .build();

        VtReport mockReport = VtReport.builder()
                .file_id(1L)
                .type("type")
                .ALYac("clean")
                .V3("clean")
                .Kaspersky("clean")
                .Falcon("clean")
                .Avast("clean")
                .Sentinelone("clean")
                .detect_engine(5)
                .complete_engine(5)
                .score(100)
                .threat_label("none")
                .report_url("http://example.com")
                .build();

        // saveReport 메소드 호출 시의 Mock 설정
        when(vtReportSaveService.getHashByFileId(1L)).thenReturn("hash123");
        when(vtReportSaveService.getReport("hash123")).thenReturn("report saved in database");

        // getReport 메소드 호출 시의 Mock 설정
        when(vtReportReturnService.getReportById(1L)).thenReturn(mockReport);
        when(vtReportReturnService.convertToDto(mockReport)).thenReturn(mockReportDto);
    }

    @Test
    void testSaveReport_Success() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post("/api/v1/vt/report/{file_id}", 1L)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.status").value("success"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.data").value("report saved in database"));
    }

    @Test
    void testSaveReport_InternalServerError() throws Exception {
        when(vtReportSaveService.getHashByFileId(1L)).thenReturn("hash123");
        when(vtReportSaveService.getReport("hash123")).thenReturn("Error: something went wrong");

        mockMvc.perform(MockMvcRequestBuilders.post("/api/v1/vt/report/{file_id}", 1L)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isInternalServerError())
                .andExpect(MockMvcResultMatchers.jsonPath("$.status").value("error"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.message").value("Error: something went wrong"));
    }

    @Test
    void testGetReport_Success() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/api/v1/vt/report/{file_id}", 1L)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.status").value("success"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.data.fileId").value(1L))
                .andExpect(MockMvcResultMatchers.jsonPath("$.data.type").value("type"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.data.alyac").value("clean"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.data.detectEngine").value(5))
                .andExpect(MockMvcResultMatchers.jsonPath("$.data.completeEngine").value(5))
                .andExpect(MockMvcResultMatchers.jsonPath("$.data.score").value(100))
                .andExpect(MockMvcResultMatchers.jsonPath("$.data.threatLabel").value("none"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.data.reportUrl").value("http://example.com"));
    }

    @Test
    void testGetReport_NotFound() throws Exception {
        when(vtReportReturnService.getReportById(2L)).thenReturn(null);

        mockMvc.perform(MockMvcRequestBuilders.get("/api/v1/vt/report/{file_id}", 2L)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isNotFound())
                .andExpect(MockMvcResultMatchers.jsonPath("$.status").value("error"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.message").value("Report not found."));
    }

    @Test
    void testGetReport_InternalServerError() throws Exception {
        when(vtReportReturnService.getReportById(1L)).thenThrow(new RuntimeException("Internal Server Error"));

        mockMvc.perform(MockMvcRequestBuilders.get("/api/v1/vt/report/{file_id}", 1L)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isInternalServerError())
                .andExpect(MockMvcResultMatchers.jsonPath("$.status").value("error"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.message").value("Internal Server Error"));
    }
}

package com.GASB.anti_malware.controller;

import com.GASB.anti_malware.controller.VirusTotalController;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.GASB.anti_malware.model.dto.response.ResponseDto;
import com.GASB.anti_malware.model.dto.response.VtReportDto;
import com.GASB.anti_malware.model.entity.StoredFile;
import com.GASB.anti_malware.model.entity.VtReport;
import com.GASB.anti_malware.service.VtReportReturnService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.modelmapper.ModelMapper;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class VirusTotalControllerTest {

    @Mock
    private VtReportReturnService vtReportReturnService;

    @InjectMocks
    private VirusTotalController vtReportController;

    private ObjectMapper objectMapper;

    @BeforeEach
    void setUp() {
        objectMapper = new ObjectMapper();
    }


    @Test
    void testGetReportFound() {
        // Mock 데이터 설정
        long fileId = 123L;

        // 예상되는 VtReportDto 객체 설정
        StoredFile storedFile = new StoredFile();
        storedFile.setId(fileId);
        VtReport vtReportEntity = VtReport.builder()
                .storedFile(storedFile)
                .type("type")
                .V3("v3")
                .ALYac("alyac")
                .Kaspersky("kaspersky")
                .Falcon("falcon")
                .Avast("avast")
                .Sentinelone("sentinelone")
                .detectEngine(11)
                .completeEngine(2)
                .score(80)
                .threatLabel("malware")
                .reportUrl("http://example.com/report")
                .build();

        // Mock 설정
        when(vtReportReturnService.getReportById(fileId)).thenReturn(mapEntityToDto(vtReportEntity));

        // 테스트할 메소드 호출
        ResponseEntity<ResponseDto<VtReportDto>> response = vtReportController.getReport(fileId);

        // 결과 검증
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertNotNull(response.getBody().getData(), "Response body data should not be null");
        VtReportDto actualDto = response.getBody().getData();

        // 각 필드 검증
        assertEquals(fileId, actualDto.getFileId());
        assertEquals("type", actualDto.getType());
        assertEquals("v3", actualDto.getV3());
        assertEquals("alyac", actualDto.getAlyac());
        assertEquals("kaspersky", actualDto.getKaspersky());
        assertEquals("falcon", actualDto.getFalcon());
        assertEquals("avast", actualDto.getAvast());
        assertEquals("sentinelone", actualDto.getSentinelone());
        assertEquals(11, actualDto.getDetectEngine());  // 여기서 문제 발생 가능성이 있는 부분
        assertEquals(2, actualDto.getCompleteEngine());
        assertEquals(80, actualDto.getScore());
        assertEquals("malware", actualDto.getThreatLabel());
        assertEquals("http://example.com/report", actualDto.getReportUrl());

        // 메소드 호출 검증
        verify(vtReportReturnService, times(1)).getReportById(fileId);
    }

    @Test
    void testGetReportNotFound() {
        // Mock 데이터 설정
        long fileId = 456L;

        when(vtReportReturnService.getReportById(fileId)).thenReturn(null);

        // 컨트롤러 호출
        ResponseEntity<ResponseDto<VtReportDto>> response = vtReportController.getReport(fileId);

        // 결과 검증
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertEquals(fileId, response.getBody().getFile_id());  // 예시로 getCode() 메소드를 사용
        assertEquals("Report not found.", response.getBody().getMessage());

        verify(vtReportReturnService, times(1)).getReportById(fileId);
    }

    @Test
    void testGetReportInternalServerError() {
        // Mock 데이터 설정
        long fileId = 789L;
        String errorMessage = "Database connection failed";

        when(vtReportReturnService.getReportById(fileId)).thenThrow(new RuntimeException(errorMessage));

        // 컨트롤러 호출
        ResponseEntity<ResponseDto<VtReportDto>> response = vtReportController.getReport(fileId);

        // 결과 검증
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertEquals(fileId, response.getBody().getFile_id());  // 예시로 getCode() 메소드를 사용
        assertEquals(errorMessage, response.getBody().getMessage());

        verify(vtReportReturnService, times(1)).getReportById(fileId);
    }

    // 엔티티를 DTO로 매핑하는 유틸리티 메소드
    private VtReportDto mapEntityToDto(VtReport vtReportEntity) {
        ModelMapper modelMapper = new ModelMapper();
        VtReportDto dto = modelMapper.map(vtReportEntity, VtReportDto.class);
        System.out.println("Mapped DTO: " + dto);
        return dto;
    }

}

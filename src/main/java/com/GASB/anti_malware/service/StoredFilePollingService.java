package com.GASB.anti_malware.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.time.Instant;

@Service
public class StoredFilePollingService {
    @Value("${spring.datasource.url}")
    private String dbUrl;

    @Value("${spring.datasource.username}")
    private String dbUsername;

    @Value("${spring.datasource.password}")
    private String dbPassword;

    private Timestamp lastCheckedTime = Timestamp.from(Instant.now());

    private final VtReportSaveService vtReportSaveService;

    public StoredFilePollingService(VtReportSaveService vtReportSaveService){
        this.vtReportSaveService = vtReportSaveService;
    }

    @Scheduled(fixedRate = 5000)
    public void pollStoredFileTable() {
        try (Connection connection = DriverManager.getConnection(dbUrl, dbUsername, dbPassword)) {
            String query = "SELECT * FROM stored_file WHERE created_at > ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setTimestamp(1, lastCheckedTime);
                try (ResultSet resultSet = statement.executeQuery()) {
                    while (resultSet.next()) {
                        System.out.println("New tuple found: " + resultSet.getLong("id"));
                        // 비동기 작업 1 시작: 리포트 존재 유무
                        vtReportSaveService.processReport(resultSet.getLong("id"));
                        // 비동기 작업 2 시작: 구름망 스캔 step2 진행
                    }
                    lastCheckedTime = Timestamp.from(Instant.now());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

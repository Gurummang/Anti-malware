package com.GASB.anti_malware.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;

// 해당 프로세스의 시작점
@Service
public class StoredFilePollingService {

    private static final Logger logger = LoggerFactory.getLogger(StoredFilePollingService.class);

    @Value("${spring.datasource.url}")
    private String dbUrl;

    @Value("${spring.datasource.username}")
    private String dbUsername;

    @Value("${spring.datasource.password}")
    private String dbPassword;

    private Timestamp lastCheckedTime = Timestamp.from(Instant.now());

    private final VtReportSaveService vtReportSaveService;
    private final GrmDeepScanService grmDeepScanService;
    private final FileStatusService fileStatusService;
    private final DataSource dataSource;

    private final int batchSize = 80;

    public StoredFilePollingService(VtReportSaveService vtReportSaveService, GrmDeepScanService grmDeepScanService
            , FileStatusService fileStatusService, DataSource dataSource) {
        this.vtReportSaveService = vtReportSaveService;
        this.grmDeepScanService = grmDeepScanService;
        this.fileStatusService = fileStatusService;
        this.dataSource = dataSource;
    }

    @Scheduled(fixedRate = 5000)
    public void pollStoredFileTable() {
        try (Connection connection = dataSource.getConnection()) {
            // 수정된 쿼리문
            String selectQuery = "SELECT id FROM stored_file WHERE processed = FALSE LIMIT ?";
            try (PreparedStatement selectStatement = connection.prepareStatement(selectQuery)) {
                selectStatement.setInt(1, batchSize);

                try (ResultSet resultSet = selectStatement.executeQuery()) {
                    List<CompletableFuture<Void>> futures = new ArrayList<>();
                    List<Long> ids = new ArrayList<>();

                    while (resultSet.next()) {
                        Long id = resultSet.getLong("id");
                        ids.add(id);
                        logger.info("New tuple found: " + id);
                        fileStatusService.createFileStatus(id);

                        // 비동기 작업 1 시작
                        CompletableFuture<Void> future1 = CompletableFuture.runAsync(() -> vtReportSaveService.processReport(id));

                        // 비동기 작업 2 시작
                        CompletableFuture<Void> future2 = CompletableFuture.runAsync(() -> grmDeepScanService.DeepScanStart(id));

                        futures.add(future1);
                        futures.add(future2);
                    }

                    // 모든 비동기 작업이 완료될 때까지 기다림
                    CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();

                    // 처리 완료 플래그 업데이트
                    markAsProcessed(connection, ids);

                }
            }
        } catch (Exception e) {
            logger.error("Error during polling stored_file table", e);
        }
    }

    private void markAsProcessed(Connection connection, List<Long> ids) {
        String updateQuery = "UPDATE stored_file SET processed = TRUE WHERE id = ?";
        try (PreparedStatement updateStatement = connection.prepareStatement(updateQuery)) {
            for (Long id : ids) {
                updateStatement.setLong(1, id);
                updateStatement.addBatch();
            }
            updateStatement.executeBatch();
        } catch (Exception e) {
            logger.error("Error marking files as processed", e);
        }
    }
}



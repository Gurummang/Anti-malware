package com.GASB.anti_malware.service;

import com.GASB.anti_malware.controller.dto.VtReportDto;
import com.GASB.anti_malware.domain.VtReport;
import com.GASB.anti_malware.domain.StoredFile;
import com.GASB.anti_malware.repository.StoredFileRepository;
import com.GASB.anti_malware.repository.VtReportRepository;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;

@Service
public class VtReportSaveService {

    @Value("${virustotal.api.key}")
    private String apikey;

    private final String BASE_URL = "https://www.virustotal.com/api/v3";


    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;
    private final VtReportRepository reportRepository;
    private final StoredFileRepository storedFileRepository;

    @Autowired
    public VtReportSaveService(RestTemplate restTemplate, VtReportRepository reportRepository, StoredFileRepository storedFileRepository) {
        this.restTemplate = restTemplate;
        this.objectMapper = new ObjectMapper();
        this.reportRepository = reportRepository;
        this.storedFileRepository = storedFileRepository;
    }

    public String getHashByFileId(long fileId) {
        StoredFile storedFile = storedFileRepository.findById(fileId);
        if (storedFile == null) {
            return "Error: File with id " + fileId + " not found";
        }
        return storedFile.getSaltedHash(); // Assuming SaltedHash is the hash value you want to retrieve
    }

    // controller에서 hash 전달해주면 수행하는 메소드
    public String getReport(String hash) {
        String url = BASE_URL + "/files/" + hash;
        HttpHeaders headers = new HttpHeaders();
        headers.set("accept", "application/json");
        headers.set("x-apikey", apikey);

        HttpEntity<String> entity = new HttpEntity<>(headers);

        try {
            String response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class).getBody();
            ReportToDto(hash, response);
            return "report saved in database";
        } catch (HttpClientErrorException e) {
            return e.getMessage();
        }
    }

    // json 파싱 후 dto에 넘겨주기
    private void ReportToDto(String hash, String response) {
        try {
            JsonNode jsonNode = objectMapper.readTree(response);
            JsonNode attributesNode = jsonNode.path("data").path("attributes");
            JsonNode statsNode = attributesNode.path("last_analysis_stats");
            JsonNode labelNode = attributesNode.path("popular_threat_category");

            String type = attributesNode.path("type_extension").asText();

            int malicious = statsNode.path("malicious").asInt();
            int suspicious = statsNode.path("suspicious").asInt();
            int undetected = statsNode.path("undetected").asInt();
            int harmless = statsNode.path("harmless").asInt();
            int detected_engine = malicious + suspicious;
            int completed_engine = malicious + suspicious + undetected + harmless;
            int score = completed_engine > 0 ? (detected_engine * 100 / completed_engine) : 0;

            VtReportDto reportDto = VtReportDto.builder()
                    .type(type)
                    .v3(extractEngineResult(attributesNode, "AhnLab-V3"))
                    .alyac(extractEngineResult(attributesNode, "ALYac"))
                    .kaspersky(extractEngineResult(attributesNode, "Kaspersky"))
                    .falcon(extractEngineResult(attributesNode, "CrowdStrike"))
                    .avast(extractEngineResult(attributesNode, "Avast"))
                    .sentinelone(extractEngineResult(attributesNode, "SentinelOne"))
                    .detectEngine(detected_engine)
                    .completeEngine(completed_engine)
                    .score(score)
                    .threatLabel(threatLabel(labelNode))
                    .reportUrl("https://www.virustotal.com/gui/file/" + hash)
                    .build();

            saveToDatabase(reportDto);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // json 내 특정 엔진들 결과 파싱하기
    private String extractEngineResult(JsonNode attributesNode, String engineName) {
        JsonNode scansNode = attributesNode.path("last_analysis_results");
        JsonNode engineNode = scansNode.path(engineName);
        if (!engineNode.isMissingNode()) {
            String category = engineNode.path("category").asText();
            if ("malicious".equals(category)) {
                return engineNode.path("result").asText();
            } else if ("undetected".equals(category)) {
                return "undetected";
            }
        }
        return null;
    }

    // json 내 threat label 파싱하기
    private String threatLabel(JsonNode labelNode) {
        JsonNode threatLabelNode = labelNode.path("suggested_threat_label");
        return threatLabelNode.isMissingNode() ? "none" : threatLabelNode.asText();
    }

    // dto -> entity로 매핑해 저장
    private void saveToDatabase(VtReportDto reportDto) {
        VtReport report = VtReport.builder()
                .type(reportDto.getType())
                .V3(reportDto.getV3())
                .ALYac(reportDto.getAlyac())
                .Kaspersky(reportDto.getKaspersky())
                .Falcon(reportDto.getFalcon())
                .Avast(reportDto.getAvast())
                .Sentinelone(reportDto.getSentinelone())
                .detect_engine(reportDto.getDetectEngine())
                .complete_engine(reportDto.getCompleteEngine())
                .score(reportDto.getScore())
                .threat_label(reportDto.getThreatLabel())
                .report_url(reportDto.getReportUrl())
                .build();

        reportRepository.save(report);
    }
}

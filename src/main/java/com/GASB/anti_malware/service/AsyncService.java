package com.GASB.anti_malware.service;

import com.GASB.anti_malware.config.RabbitMQProperties;
import com.GASB.anti_malware.model.dto.response.Result;
import com.GASB.anti_malware.model.entity.StoredFile;
import com.GASB.anti_malware.repository.file.StoredFileRepo;
import com.GASB.anti_malware.service.virustotal.VtAnalysisService;
//import com.GASB.anti_malware.service.virustotal.VtReportSaveService;
//import com.GASB.anti_malware.service.virustotal.VtUploadService;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.scheduling.annotation.Async;
//import org.springframework.stereotype.Service;
//
//import java.io.IOException;
//import java.io.InputStream;
//import java.util.Optional;
//
//@Service
//public class AsyncService {
//
//    private static final Logger logger = LoggerFactory.getLogger(AsyncService.class);
//    private final VtAnalysisService vtAnalysisService;
//    private final VtReportSaveService vtReportSaveService;
//    private final VtUploadService vtUploadService;
//    private final FileStatusService fileStatusService;
//    private final S3FileDownloadService s3FileDownloadService;
//    private final RabbitMQProperties properties;
//    private final StoredFileRepo storedFileRepo;
//
//    private static final int RETRY_INTERVAL = 10000;  // 재시도 간격 (밀리초 단위, 10초)
//
//    @Autowired
//    public AsyncService(VtAnalysisService vtAnalysisService, VtReportSaveService vtReportSaveService, StoredFileRepo storedFileRepo, VtUploadService vtUploadService, S3FileDownloadService s3FileDownloadService, FileStatusService fileStatusService, RabbitMQProperties properties) {
//        this.vtAnalysisService = vtAnalysisService;
//        this.vtReportSaveService = vtReportSaveService;
//        this.storedFileRepo = storedFileRepo;
//        this.vtUploadService = vtUploadService;
//        this.s3FileDownloadService = s3FileDownloadService;
//        this.fileStatusService = fileStatusService;
//        this.properties = properties;
//    }

    // vt analysis service
//    @Async("taskExecutor")
//    public void pollAnalysisStatus(String analysisId, long fileId) {
//        int retries = 0;
//        boolean isCompleted = false;
//
//        while (!isCompleted) {
//            try {
//                Thread.sleep(RETRY_INTERVAL);
//                isCompleted = vtAnalysisService.checkAnalysisStatus(analysisId, fileId);
//
//                if (isCompleted) {
//                    logger.info("Analysis completed for fileId: {}", fileId);
//                } else {
//                    logger.info("Analysis not yet complete for fileId: {}, retrying... (Attempt {})", fileId, retries + 1);
//                }
//            } catch (InterruptedException e) {
//                Thread.currentThread().interrupt();
//                logger.error("Thread interrupted during sleep for fileId: {}", fileId, e);
//                return;
//            } catch (Exception e) {
//                logger.error("Unexpected error occurred while checking analysis status for fileId: {}", fileId, e);
//            }
//
//            retries++;
//        }
//    }

    // vt report save service
//    @Async("taskExecutor")
//    public void processReport(Long fileId) {
//        // VT 리포트를 가져옵니다.
//        Result reportResult = vtReportSaveService.saveReportById(fileId);
//
//        // 리포트가 성공적으로 저장된 경우 상태 업데이트
//        if (reportResult.isSuccess()) {
//            fileStatusService.updateVtStatus(fileId, 1); // vtStatus를 1로 업데이트
//        }
//    }

    // vt upload service
//    public Result uploadFileFromS3(long fileId) {
//        Optional<StoredFile> optionalStoredFile = storedFileRepo.findById(fileId);
//        if (optionalStoredFile.isEmpty()) {
//            return new Result(false, "File not found in database");
//        }
//        StoredFile storedFile = optionalStoredFile.get();
//
//        int fileSizeOfByte = storedFile.getSize();
//        String savePath = storedFile.getSavePath();
//        String[] parts = savePath.split("/", 2);
//
//        if (parts.length != 2) {
//            return new Result(false, "Invalid savePath format");
//        }
//
//        String bucketName = parts[0];
//        String key = parts[1];
//        try (InputStream inputStream = s3FileDownloadService.downloadFile(bucketName, key)) {
//            String uploadUrl = vtUploadService.getUploadUrl(fileSizeOfByte);
//            String analysisId = vtUploadService.performUpload(uploadUrl, inputStream, key, fileId);
//            return new Result(true, analysisId); // 성공 시 분석 ID 반환
//        } catch (IOException e) {
//            logger.error("Error during file upload: {}", e.getMessage());
//            return new Result(false, "Error during file upload: " + e.getMessage());
//        }
//    }
//}

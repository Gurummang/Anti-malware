package com.GASB.anti_malware.service;

import com.GASB.anti_malware.model.dto.response.*;
import com.GASB.anti_malware.model.entity.FileStatus;
import com.GASB.anti_malware.model.entity.StoredFile;
import com.GASB.anti_malware.model.entity.VtReport;
import com.GASB.anti_malware.repository.FileStatusRepository;
import com.GASB.anti_malware.repository.StoredFileRepository;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class FileStatusService {

    private final FileStatusRepository fileStatusRepository;
    private final ModelMapper modelMapper;

    @Autowired
    public FileStatusService(FileStatusRepository fileStatusRepository, ModelMapper modelMapper){
        this.fileStatusRepository = fileStatusRepository;
        this.modelMapper = modelMapper;
    }

    public List<FileListDto> getFileWithUnScannedVt() {
        List<FileStatus> fileStatuses = fileStatusRepository.findByVtStatus(-1);
        return fileStatuses.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    private FileListDto convertToDto(FileStatus fileStatus) {
        StoredFile storedFile = fileStatus.getStoredFile();
        VtReport vtReport = storedFile.getVtReport();
        VtReportDto vtReportDto = (vtReport != null) ? convertToVtReportDto(vtReport) : null;
        FileStatusDto fileStatusDto = convertToFileStatusDto(fileStatus);

        return FileListDto.builder()
                .id(storedFile.getId())
                .saltedHash(storedFile.getSaltedHash())
                .size(storedFile.getSize())
                .type(storedFile.getType())
                .vtReport(vtReportDto)
                .fileStatus(fileStatusDto)
                .build();
    }

    private VtReportDto convertToVtReportDto(VtReport vtReport) {
        return modelMapper.map(vtReport, VtReportDto.class);
    }

    private FileStatusDto convertToFileStatusDto(FileStatus fileStatus) {
        return modelMapper.map(fileStatus, FileStatusDto.class);
    }
}

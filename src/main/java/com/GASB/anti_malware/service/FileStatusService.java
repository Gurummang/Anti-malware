package com.GASB.anti_malware.service;

import com.GASB.anti_malware.model.dto.response.*;
import com.GASB.anti_malware.model.entity.FileStatus;
import com.GASB.anti_malware.model.entity.StoredFile;
import com.GASB.anti_malware.model.entity.VtReport;
import com.GASB.anti_malware.repository.file.FileStatusRepo;
import com.GASB.anti_malware.repository.file.FileUploadRepo;
import com.GASB.anti_malware.repository.file.StoredFileRepo;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

// VT 스캔이 되지 않은 파일 리스트 반환
@Service
@Slf4j
public class FileStatusService {

    private final StoredFileRepo storedFileRepository;
    private final FileStatusRepo fileStatusRepository;
    private final FileUploadRepo fileUploadRepo;
    private final ModelMapper modelMapper;

    @Autowired
    public FileStatusService(FileStatusRepo fileStatusRepository, ModelMapper modelMapper, StoredFileRepo storedFileRepository,FileUploadRepo fileUploadRepo){
        this.fileStatusRepository = fileStatusRepository;
        this.modelMapper = modelMapper;
        this.storedFileRepository = storedFileRepository;
        this.fileUploadRepo = fileUploadRepo;
    }

    @Transactional
    public void createFileStatus(Long fileId) {
        // StoredFile을 찾습니다. 없으면 예외를 던집니다.
        StoredFile storedFile = storedFileRepository.findById(fileId)
                .orElseThrow(() -> new RuntimeException("StoredFile not found"));

        // FileStatus 인스턴스를 생성합니다.
        FileStatus fileStatus = FileStatus.builder()
                .storedFile(storedFile)
                .gscanStatus(-1)
                .dlpStatus(-1)
                .vtStatus(-1)
                .build();

        // FileStatus를 저장합니다.
        fileStatusRepository.save(fileStatus);
    }

    public List<FileListDto> getFileWithUnScannedVt() {
        List<FileStatus> fileStatuses = fileStatusRepository.findByVtStatus(-1);
        return fileStatuses.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    private FileListDto convertToDto(FileStatus fileStatus) {
        StoredFile storedFile = fileStatus.getStoredFile();
        VtReport vtReport = storedFile.getVtReport();
        VtReportDto vtReportDto = (vtReport != null) ? convertToVtReportDto(vtReport) : null;
        FileStatusDto fileStatusDto = convertToFileStatusDto(fileStatus);

        return FileListDto.builder()
                .id(storedFile.getId())
                .saltedHash(storedFile.getSaltedHash())
                .size(storedFile.getSize())
                .type(storedFile.getType())
                .vtReport(vtReportDto)
                .fileStatus(fileStatusDto)
                .build();
    }

    @Transactional
    public void updateVtStatus(Long fileId, int status) {
        // 리포트가 성공적으로 저장된 경우 status를 업데이트 해줌
        Optional<FileStatus> optionalFileStatus = fileStatusRepository.findByStoredFileId(fileId);

        optionalFileStatus.ifPresentOrElse(fileStatus -> {
            fileStatus.setVtStatus(status);
            fileStatusRepository.save(fileStatus);
            log.info("FileStatus updated for fileId: {}", fileId);
        }, () -> {
            log.error("FileStatus not found for fileId: {}", fileId);
        });
    }

    @Transactional
    public void updateGscanStatus(long fileId){
        // 리포트가 성공적으로 저장된 경우 status를 업데이트 해줌
        Optional<FileStatus> optionalFileStatus = fileStatusRepository.findByStoredFileId(fileId);

        optionalFileStatus.ifPresentOrElse(fileStatus -> {
            fileStatus.setGscanStatus(1);
            fileStatusRepository.save(fileStatus);
            log.info("GscanStatus updated for fileId: {}", fileId);
        }, () -> {
            log.error("GscanStatus not found for fileId: {}", fileId);
        });
    }


    private VtReportDto convertToVtReportDto(VtReport vtReport) {
        return modelMapper.map(vtReport, VtReportDto.class);
    }

    private FileStatusDto convertToFileStatusDto(FileStatus fileStatus) {
        return modelMapper.map(fileStatus, FileStatusDto.class);
    }

    public int getVtStatusByFileId(Long fileId) {
        String hash = fileUploadRepo.findHashById(fileId);
        Optional<StoredFile> optionalStoredFile = storedFileRepository.findByHash(hash);
        if (optionalStoredFile.isEmpty()) {
            log.error("File not found in database");
        }
        StoredFile storedFile = optionalStoredFile.get();

        return fileStatusRepository.findByStoredFileId(storedFile.getId())
                .map(FileStatus::getVtStatus)
                .orElse(-1); // 상태가 없으면 -1 반환
    }

}

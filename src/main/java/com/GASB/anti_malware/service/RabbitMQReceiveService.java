package com.GASB.anti_malware.service;

import com.GASB.anti_malware.model.dto.response.Result;
import com.GASB.anti_malware.service.grmscan.GrmDeepScanService;
import com.GASB.anti_malware.service.virustotal.VtAnalysisService;
import com.GASB.anti_malware.service.virustotal.VtReportSaveService;
import com.GASB.anti_malware.service.virustotal.VtUploadService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Service;


@Service
@Slf4j
public class RabbitMQReceiveService {

    private final GrmDeepScanService grmDeepScanService;
    private final VtUploadService vtUploadService;
    private final VtReportSaveService vtReportSaveService;
    private final VtAnalysisService vtAnalysisService;

    public RabbitMQReceiveService(GrmDeepScanService grmDeepScanService,
                                  VtUploadService vtUploadService, VtReportSaveService vtReportSaveService, VtAnalysisService vtAnalysisService){
        this.grmDeepScanService = grmDeepScanService;
        this.vtUploadService = vtUploadService;
        this.vtReportSaveService = vtReportSaveService;
        this.vtAnalysisService = vtAnalysisService;
    }

    @RabbitListener(queues = "#{@rabbitMQProperties.vtReportQueue}")
    public void onVtReportRequestReceived(long uploadId) { ///////////
        try {
            log.info("Received VT report request for file ID: {}", uploadId);
            vtReportSaveService.processReport(uploadId);
        } catch (Exception e) {
            log.error("Failed to process VT report request for file ID: {}", uploadId, e);
        }
    }

    @RabbitListener(queues = "#{@rabbitMQProperties.grmScanQueue}")
    public void onGrmScanRequestReceived(long uploadId) {
        try {
            log.info("Received GRM scan request for file ID: {}", uploadId);
            grmDeepScanService.deepScanStart(uploadId);
        } catch (Exception e) {
            log.error("Failed to process GRM scan request for file ID: {}", uploadId, e);
        }
    }

    @RabbitListener(queues = "#{@rabbitMQProperties.vtUploadQueue}")
    public void onVtUploadRequestReceived(long fileId){
        try {
            Result result = vtUploadService.uploadFileFromS3(fileId);
            if(result.isSuccess()) {
                log.info("analysis: {}, file: {}", result.getMessage(), fileId);
                vtAnalysisService.pollAnalysisStatus(result.getMessage(), fileId);
            }
        } catch (Exception e) {
            log.error("Failed to process Vt upload request for file ");
        }
    }
}

package com.GASB.anti_malware.service;

import com.GASB.anti_malware.config.RabbitMQProperties;
import com.GASB.anti_malware.model.dto.request.FileUploadPayload;
import com.GASB.anti_malware.service.grmscan.GrmDeepScanService;
import com.GASB.anti_malware.service.virustotal.VtAnalysisService;
import com.GASB.anti_malware.service.virustotal.VtReportSaveService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class RabbitMQReceiveService {

    private static final Logger logger = LoggerFactory.getLogger(RabbitMQReceiveService.class);

    private final RabbitMQProperties properties;
    private final ObjectMapper objectMapper;
    private final VtReportSaveService vtReportSaveService;
    private final VtAnalysisService vtAnalysisService;
    private final GrmDeepScanService grmDeepScanService;

    public RabbitMQReceiveService(RabbitMQProperties properties, VtReportSaveService vtReportSaveService, VtAnalysisService vtAnalysisService, GrmDeepScanService grmDeepScanService, ObjectMapper objectMapper){
        this.objectMapper = objectMapper;
        this.properties = properties;
        this.vtReportSaveService = vtReportSaveService;
        this.vtAnalysisService = vtAnalysisService;
        this.grmDeepScanService = grmDeepScanService;
    }

    @RabbitListener(queues = "#{@rabbitMQProperties.vtReportQueue}")
    public void onVtReportRequestReceived(long fileId) {
        try {
            logger.info("Received VT report request for file ID: {}", fileId);
            vtReportSaveService.processReport(fileId);
        } catch (Exception e) {
            logger.error("Failed to process VT report request for file ID: {}", fileId, e);
        }
    }

    @RabbitListener(queues = "#{@rabbitMQProperties.grmScanQueue}")
    public void onGrmScanRequestReceived(long fileId) {
        try {
            logger.info("Received GRM scan request for file ID: {}", fileId);
            grmDeepScanService.DeepScanStart(fileId);
        } catch (Exception e) {
            logger.error("Failed to process GRM scan request for file ID: {}", fileId, e);
        }
    }

    @RabbitListener(queues = "#{@rabbitMQProperties.vtUploadQueue}")
    public void onVtUploadRequestReceived(String message){
        try {
            FileUploadPayload payload = objectMapper.readValue(message, FileUploadPayload.class);
            logger.info("analysis: {}, file: {}", payload.getAnalysisId(), payload.getFileId());
            vtAnalysisService.pollAnalysisStatus(payload.getAnalysisId(), payload.getFileId());
        } catch (Exception e) {
            logger.error("Failed to process Vt upload request for file ");
        }
    }

    // python 서버에서 구현 예정
    @RabbitListener(queues = "#{@rabbitMQProperties.exeScanQueue}")
    public void onExeScanReceivesTest(String path){
        System.out.println("-----EXE SCAN START------");
        System.out.println(path);
    }

    @RabbitListener(queues = "#{@rabbitMQProperties.imgScanQueue}")
    public void onImgScanReceivesTest(String path){
        System.out.println("-----IMG SCAN START------");
        System.out.println(path);
    }

    @RabbitListener(queues = "#{@rabbitMQProperties.docScanQueue}")
    public void onDocScanReceivesTest(String path){
        System.out.println("-----DOC SCAN START------");
        System.out.println(path);
    }
}

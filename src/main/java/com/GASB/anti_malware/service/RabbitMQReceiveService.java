package com.GASB.anti_malware.service;

import com.GASB.anti_malware.config.RabbitMQProperties;
import com.GASB.anti_malware.model.dto.response.Result;
import com.GASB.anti_malware.service.grmscan.GrmDeepScanService;
import com.GASB.anti_malware.service.virustotal.VtAnalysisService;
import com.GASB.anti_malware.service.virustotal.VtReportSaveService;
import com.GASB.anti_malware.service.virustotal.VtUploadService;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class RabbitMQReceiveService {

    private static final Logger logger = LoggerFactory.getLogger(RabbitMQReceiveService.class);

    private final RabbitMQProperties properties;
    private final AsyncService asyncService;
    private final GrmDeepScanService grmDeepScanService;

    public RabbitMQReceiveService(RabbitMQProperties properties, AsyncService asyncService, GrmDeepScanService grmDeepScanService){
        this.properties = properties;
        this.asyncService = asyncService;
        this.grmDeepScanService = grmDeepScanService;
    }

    @RabbitListener(queues = "#{@rabbitMQProperties.vtReportQueue}")
    public void onVtReportRequestReceived(long fileId) {
        try {
            logger.info("Received VT report request for file ID: {}", fileId);
            asyncService.processReport(fileId);
        } catch (Exception e) {
            logger.error("Failed to process VT report request for file ID: {}", fileId, e);
        }
    }

    @RabbitListener(queues = "#{@rabbitMQProperties.grmScanQueue}")
    public void onGrmScanRequestReceived(long fileId) {
        try {
            logger.info("Received GRM scan request for file ID: {}", fileId);
            grmDeepScanService.deepScanStart(fileId);
        } catch (Exception e) {
            logger.error("Failed to process GRM scan request for file ID: {}", fileId, e);
        }
    }

    @RabbitListener(queues = "#{@rabbitMQProperties.vtUploadQueue}")
    public void onVtUploadRequestReceived(long fileId){
        try {
            Result result = asyncService.uploadFileFromS3(fileId);
            if(result.isSuccess()) {
                logger.info("analysis: {}, file: {}", result.getMessage(), fileId);
                asyncService.pollAnalysisStatus(result.getMessage(), fileId);
            }
        } catch (Exception e) {
            logger.error("Failed to process Vt upload request for file ");
        }
    }
}

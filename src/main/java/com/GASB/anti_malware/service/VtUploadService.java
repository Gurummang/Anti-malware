package com.GASB.anti_malware.service;

import com.GASB.anti_malware.model.entity.FileStatus; // Import FileStatus entity
import com.GASB.anti_malware.repository.FileStatusRepository; // Import FileStatusRepository
import com.GASB.anti_malware.repository.StoredFileRepository;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.nio.file.Files;
import java.util.Optional;

@Service
public class VtUploadService {

    private static final Logger logger = LoggerFactory.getLogger(VtUploadService.class);

    @Value("${virustotal.api.key}")
    private String apikey;

    private final String BASE_URL = "https://www.virustotal.com/api/v3/files";
    private final StoredFileRepository storedFileRepository;
    private final FileStatusRepository fileStatusRepository; // Add this line
    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    @Autowired
    public VtUploadService(StoredFileRepository storedFileRepository,
                           FileStatusRepository fileStatusRepository, // Add this line
                           RestTemplate restTemplate,
                           ObjectMapper objectMapper) {
        this.storedFileRepository = storedFileRepository;
        this.fileStatusRepository = fileStatusRepository; // Add this line
        this.restTemplate = restTemplate;
        this.objectMapper = objectMapper;
    }

    public String uploadFile(long fileId) {
        String filePath = storedFileRepository.findSavePathById(fileId);
        if (filePath == null) {
            return "Error: File not found";
        }

        File file = new File(filePath);
        if (!file.exists()) {
            return "Error: File not found at " + filePath;
        }

        // Update the VtStatus to 0 (in progress)
        FileStatus fileStatus = fileStatusRepository.findByStoredFileId(fileId);
        if (fileStatus != null) {
            fileStatus.setVtStatus(0); // Set status to 0 (in progress)
            fileStatusRepository.save(fileStatus); // Save the updated status
        }

        try {
            byte[] fileContent = Files.readAllBytes(file.toPath());
            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
            body.add("file", new ByteArrayResource(fileContent) {
                @Override
                public String getFilename() {
                    return file.getName();
                }
            });

            HttpHeaders headers = new HttpHeaders();
            headers.set("x-apikey", apikey);
            headers.setContentType(MediaType.MULTIPART_FORM_DATA);

            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);
            ResponseEntity<String> response = restTemplate.exchange(BASE_URL, HttpMethod.POST, requestEntity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JsonNode jsonNode = objectMapper.readTree(response.getBody());
                return jsonNode.path("data").path("id").asText();
            } else {
                return "Error: " + response.getStatusCode();
            }

        } catch (Exception e) {
            return e.getMessage();
        }
    }

}

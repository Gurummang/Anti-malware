package com.GASB.anti_malware.service;

import com.GASB.anti_malware.model.dto.response.Result;
import com.GASB.anti_malware.repository.StoredFileRepository;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

@Service
public class VtUploadService {

    private static final Logger logger = LoggerFactory.getLogger(VtUploadService.class);

    @Value("${virustotal.api.key}")
    private String apikey;

    private final String BASE_URL = "https://www.virustotal.com/api/v3/files";
    private final StoredFileRepository storedFileRepository;
    private final FileStatusService fileStatusService;
    private final OkHttpClient client;
    private final ObjectMapper objectMapper;
    private final int SIZE_32MB = 32 * 1024 * 1024;
    private final int SIZE_650MB = 650 * 1024 * 1024;

    @Autowired
    public VtUploadService(StoredFileRepository storedFileRepository,
                           FileStatusService fileStatusService) {
        this.storedFileRepository = storedFileRepository;
        this.fileStatusService = fileStatusService;
        this.client = new OkHttpClient();
        this.objectMapper = new ObjectMapper();  // ObjectMapper 초기화
    }

    public Result uploadFile(long fileId) {
        String filePath = storedFileRepository.findSavePathById(fileId);
        if (filePath == null) {
            return new Result(false, "Error: File not found");
        }

        File file = new File(filePath);
        if (!file.exists()) {
            return new Result(false, "Error: File not found at " + filePath);
        }

        fileStatusService.updateVtStatus(fileId, 0);

        try {
            String uploadUrl = getUploadUrl(file.length());
            String analysisId = performUpload(uploadUrl, file);
            return new Result(true, analysisId); // 성공 시 분석 ID 반환
        } catch (IOException e) {
            logger.error("Error during file upload: {}", e.getMessage());
            return new Result(false, "Error during file upload: " + e.getMessage());
        }
    }

    private String getUploadUrl(long fileSize) throws IOException {
        if (fileSize < SIZE_32MB) {
            return BASE_URL;
        } else if (fileSize >= SIZE_32MB && fileSize < SIZE_650MB) {
            String url = BASE_URL + "/upload_url";
            Request request = new Request.Builder()
                    .url(url)
                    .get()
                    .addHeader("x-apikey", apikey)
                    .addHeader("accept", "application/json")
                    .build();

            try (Response response = client.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    throw new IOException("Failed to get upload URL: " + response);
                }
                return extractUploadUrl(response.body().string()); // 응답에서 URL 반환
            }
        } else {
            throw new IOException("Error: File size exceeds 650MB limit.");
        }
    }

    private String extractUploadUrl(String responseBody) throws IOException {
        JsonNode jsonNode = objectMapper.readTree(responseBody);
        return jsonNode.path("data").asText();
    }

    private String performUpload(String url, File file) throws IOException {
        RequestBody requestBody;
        try (InputStream inputStream = new FileInputStream(file)) {
            requestBody = new MultipartBody.Builder()
                    .setType(MultipartBody.FORM)
                    .addFormDataPart("file", file.getName(),
                            RequestBody.create(inputStream.readAllBytes(), MediaType.parse("application/octet-stream")))
                    .build();
        }

        Request request = new Request.Builder()
                .url(url)
                .post(requestBody)
                .addHeader("x-apikey", apikey)
                .build();

        try (Response response = client.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new IOException("Failed to upload file: " + response);
            }

            String responseBody = response.body().string();
            logger.info("Upload response body: " + responseBody);
            return extractAnalysisId(responseBody); // 응답에서 분석 ID 추출하여 반환
        }
    }

    private String extractAnalysisId(String responseBody) throws IOException {
        JsonNode jsonNode = objectMapper.readTree(responseBody);
        return jsonNode.path("data").path("id").asText();
    }
}

package com.GASB.anti_malware.service.dlp;

import com.GASB.anti_malware.model.dto.request.DlpPolicyRequest;
import com.GASB.anti_malware.model.dto.response.Result;
import com.GASB.anti_malware.model.entity.OrgSaaS;
import com.GASB.anti_malware.model.entity.Policy;
import com.GASB.anti_malware.repository.dlp.PiiRepo;
import com.GASB.anti_malware.repository.dlp.PolicyRepo;
import com.GASB.anti_malware.repository.org.OrgSaaSRepo;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@Slf4j
public class DlpPolicyService {

    private final PolicyRepo policyRepo;
    private final PiiRepo piiRepo;
    private final OrgSaaSRepo orgSaaSRepo;

    @Autowired
    public DlpPolicyService(PolicyRepo policyRepo, PiiRepo piiRepo, OrgSaaSRepo orgSaaSRepo) {
        this.policyRepo = policyRepo;
        this.piiRepo = piiRepo;
        this.orgSaaSRepo = orgSaaSRepo;
    }

    public Result setPolicy(DlpPolicyRequest dlpPolicyRequest) {
        Integer orgSaasId = dlpPolicyRequest.getOrgSaasId();
        OrgSaaS orgSaas = orgSaaSRepo.findById(orgSaasId).get();
        String policyName = dlpPolicyRequest.getPolicyName();
        String description = dlpPolicyRequest.getDescription();
        boolean identify = dlpPolicyRequest.isIdentify();
        boolean passport = dlpPolicyRequest.isPassport();
        boolean drive = dlpPolicyRequest.isDrive();
        boolean foreigner = dlpPolicyRequest.isForeigner();
        String comment = dlpPolicyRequest.getComment();

        Policy policy = new Policy();
        policy.setPolicyName(policyName);
        policy.setOrgSaas(orgSaas);
        policy.setDescription(description);
        policy.setIdentify(identify);
        policy.setPassport(passport);
        policy.setDrive(drive);
        policy.setForeigner(foreigner);
        policy.setComment(comment);

        policyRepo.save(policy);
        return new Result(true, "Policy updated");
    }

    public List<Result> deletePolicy(List<DlpPolicyRequest> dlpPolicyRequests) {
        List<Result> results = new ArrayList<>();  // 결과를 저장할 리스트

        for (DlpPolicyRequest dlpPolicyRequest : dlpPolicyRequests) {
            Integer policyId = dlpPolicyRequest.getPolicyId();

            if (policyId != null) {
                Optional<Policy> policy = policyRepo.findById(policyId);

                if (policy.isPresent()) {
                    try {
                        policyRepo.delete(policy.get());
                        results.add(new Result(true, "Policy deleted"));  // 성공 결과 추가
                    } catch (Exception e) {
                        results.add(new Result(false, "Delete Failure: " + e.getMessage()));  // 실패 결과 추가
                    }
                } else {
                    results.add(new Result(false, "Policy not found"));  // 정책이 없는 경우의 결과 추가
                }
            } else {
                results.add(new Result(false, "Can Not Delete without ID"));  // ID가 없는 경우의 결과 추가
            }
        }

        return results;  // 모든 결과 반환
    }
}

package com.GASB.anti_malware.service.dlp;

import com.GASB.anti_malware.model.dto.request.DlpPolicyRequest;
import com.GASB.anti_malware.model.dto.response.DlpPolicyResp;
import com.GASB.anti_malware.model.dto.response.Result;
import com.GASB.anti_malware.model.entity.Org;
import com.GASB.anti_malware.model.entity.OrgSaaS;
import com.GASB.anti_malware.model.entity.Policy;
import com.GASB.anti_malware.model.entity.SaaS;
import com.GASB.anti_malware.repository.dlp.PiiRepo;
import com.GASB.anti_malware.repository.dlp.PolicyRepo;
import com.GASB.anti_malware.repository.org.OrgSaaSRepo;
import jakarta.transaction.Transactional;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@Slf4j
public class DlpPolicyService {

    private final PolicyRepo policyRepo;
    private final PiiRepo piiRepo;
    private final OrgSaaSRepo orgSaaSRepo;

    @Autowired
    public DlpPolicyService(PolicyRepo policyRepo, PiiRepo piiRepo, OrgSaaSRepo orgSaaSRepo) {
        this.policyRepo = policyRepo;
        this.piiRepo = piiRepo;
        this.orgSaaSRepo = orgSaaSRepo;
    }

//    @Transactional
    public List<DlpPolicyResp> setPolicy(DlpPolicyRequest dlpPolicyRequest) {
        List<Integer> orgSaasIds = dlpPolicyRequest.getOrgSaasId();
        List<DlpPolicyResp> responseList = new ArrayList<>();

        String policyName = dlpPolicyRequest.getPolicyName();
        String description = dlpPolicyRequest.getDescription();
        boolean identify = dlpPolicyRequest.isIdentify();
        boolean passport = dlpPolicyRequest.isPassport();
        boolean drive = dlpPolicyRequest.isDrive();
        boolean foreigner = dlpPolicyRequest.isForeigner();
        String comment = dlpPolicyRequest.getComment();

        for (Integer orgSaasId : orgSaasIds) {
            Optional<OrgSaaS> optionalOrgSaaS = orgSaaSRepo.findById(orgSaasId);

            if (optionalOrgSaaS.isPresent()) {
                OrgSaaS orgSaaS = optionalOrgSaaS.get();

                // Policy 객체를 생성하고 설정합니다.
                Policy policy = new Policy();
                policy.setPolicyName(policyName);
                policy.setOrgSaas(orgSaaS);
                policy.setDescription(description);
                policy.setIdentify(identify);
                policy.setPassport(passport);
                policy.setDrive(drive);
                policy.setForeigner(foreigner);
                policy.setComment(comment);

                // Policy를 저장합니다.
                policyRepo.save(policy);

                System.out.println(policy.getId());

                // 성공 응답을 생성합니다.
                DlpPolicyResp response = DlpPolicyResp.builder()
                        .success(true)
                        .message("Policy Set Success!")
                        .policyId(policy.getId()) // 저장된 정책의 ID를 포함합니다.
                        .policyName(policyName)
                        .build();

                responseList.add(response);
            } else {
                // 실패 응답을 생성합니다.
                DlpPolicyResp response = DlpPolicyResp.builder()
                        .success(false)
                        .message("OrgSaasId Not Found: " + orgSaasId)
                        .policyId(0) // 정책 ID가 없으므로 0을 사용합니다.
                        .policyName(policyName)
                        .build();

                responseList.add(response);
            }
        }
        return responseList;
    }

    public List<DlpPolicyResp> deletePolicy(DlpPolicyRequest dlpPolicyRequest) {
        List<Integer> policyIds = dlpPolicyRequest.getPolicyId();
        List<DlpPolicyResp> respList = new ArrayList<>();

        for(Integer policyId : policyIds) {
            Optional<Policy> optionalPolicy = policyRepo.findById(policyId);

            if(optionalPolicy.isPresent()) {
                Policy policy = optionalPolicy.get();

                policyRepo.delete(policy);

                DlpPolicyResp resp = DlpPolicyResp.builder()
                        .success(true)
                        .message("Delete Success!")
                        .policyId(policyId)
                        .policyName(null)
                        .build();

                respList.add(resp);
            } else {
                DlpPolicyResp resp = DlpPolicyResp.builder()
                        .success(false)
                        .message("Policy Not Found: " + policyId)
                        .policyId(policyId)
                        .policyName(null)
                        .build();

                respList.add(resp);
            }
        }
        return respList;
    }

    public List<DlpPolicyResp> getPolicyList(DlpPolicyRequest dlpPolicyRequest) {
        Integer orgId = dlpPolicyRequest.getOrgId();
        List<Policy> policyList = policyRepo.findByOrgId(orgId);
        List<DlpPolicyResp> respList = new ArrayList<>();

        for(Policy policy : policyList) {
            OrgSaaS orgSaas = policy.getOrgSaas();
            Org org = orgSaas.getOrg();
            SaaS saas = orgSaas.getSaas();

            DlpPolicyResp resp = DlpPolicyResp.builder()
                    .success(null)
                    .message(null)
                    .policyId(policy.getId())
                    .orgSaasId(orgSaas.getId())
                    .orgId(org.getId())
                    .saasId(saas.getId())
                    .policyName(policy.getPolicyName())
                    .identify(policy.isIdentify())
                    .passport(policy.isPassport())
                    .drive(policy.isDrive())
                    .foreigner(policy.isForeigner())
                    .description(policy.getDescription())
                    .comment(policy.getComment())
                    .build();
            respList.add(resp);
        }
        return respList;
    }
//    public List<Result> deletePolicy(List<DlpPolicyRequest> dlpPolicyRequests) {
//        List<Result> results = new ArrayList<>();  // 결과를 저장할 리스트
//
//        for (DlpPolicyRequest dlpPolicyRequest : dlpPolicyRequests) {
//            Integer policyId = dlpPolicyRequest.getPolicyId();
//
//            if (policyId != null) {
//                Optional<Policy> policy = policyRepo.findById(policyId);
//
//                if (policy.isPresent()) {
//                    try {
//                        policyRepo.delete(policy.get());
//                        results.add(new Result(true, "Policy deleted"));  // 성공 결과 추가
//                    } catch (Exception e) {
//                        results.add(new Result(false, "Delete Failure: " + e.getMessage()));  // 실패 결과 추가
//                    }
//                } else {
//                    results.add(new Result(false, "Policy not found"));  // 정책이 없는 경우의 결과 추가
//                }
//            } else {
//                results.add(new Result(false, "Can Not Delete without ID"));  // ID가 없는 경우의 결과 추가
//            }
//        }
//
//        return results;  // 모든 결과 반환
//    }
}

package com.GASB.anti_malware.service.dlp;

import com.GASB.anti_malware.model.dto.request.DlpPolicyRequest;
import com.GASB.anti_malware.model.dto.response.DlpPolicyResp;
import com.GASB.anti_malware.model.entity.*;
import com.GASB.anti_malware.repository.dlp.PolicyRepo;
import com.GASB.anti_malware.repository.org.OrgSaaSRepo;
import com.GASB.anti_malware.repository.org.WorkspaceConfigRepo;
import jakarta.transaction.Transactional;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@Slf4j
public class DlpPolicyService {

    private final PolicyRepo policyRepo;
    private final OrgSaaSRepo orgSaaSRepo;
    private final WorkspaceConfigRepo workspaceConfigRepo;
    private final DlpService dlpService;

    @Autowired
    public DlpPolicyService(PolicyRepo policyRepo, OrgSaaSRepo orgSaaSRepo, WorkspaceConfigRepo workspaceConfigRepo, DlpService dlpService) {
        this.policyRepo = policyRepo;
        this.orgSaaSRepo = orgSaaSRepo;
        this.workspaceConfigRepo = workspaceConfigRepo;
        this.dlpService = dlpService;
    }
    @Transactional
    public List<DlpPolicyResp> setPolicy(DlpPolicyRequest dlpPolicyRequest) {
        List<Integer> orgSaasIds = dlpPolicyRequest.getOrgSaasId();
        List<DlpPolicyResp> responseList = new ArrayList<>();


        // Req DTO에서 저장할 값 추출
        String policyName = dlpPolicyRequest.getPolicyName();
        String description = dlpPolicyRequest.getDescription();
        boolean identify = dlpPolicyRequest.isIdentify();
        boolean passport = dlpPolicyRequest.isPassport();
        boolean drive = dlpPolicyRequest.isDrive();
        boolean foreigner = dlpPolicyRequest.isForeigner();
        String comment = dlpPolicyRequest.getComment();


        // orgSaasId가 list이므로 순회하며 저장
        // 여기서 policyName등 정책의 내용을 다르게 저장하고싶다면 list로 여러번 보내면 안됨
        // 이 부분은 동일한 정책 내용을 여러 SaaS에 대해 적용할 때를 가정한 것
        for (Integer orgSaasId : orgSaasIds) {
            Optional<OrgSaaS> optionalOrgSaaS = orgSaaSRepo.findById(orgSaasId);

            boolean dupleChecker = policyRepo.existsByCriteria(orgSaasId, identify, passport, drive, foreigner);
            if(dupleChecker) {
                DlpPolicyResp response = DlpPolicyResp.builder()
                        .success(false)
                        .message("Same Policy Already Exist")
                        .build();

                responseList.add(response);
                continue;
            }

            if (optionalOrgSaaS.isPresent()) {
                OrgSaaS orgSaaS = optionalOrgSaaS.get();

                Policy policy = new Policy();
                policy.setPolicyName(policyName);
                policy.setOrgSaas(orgSaaS);
                policy.setDescription(description);
                policy.setIdentify(identify);
                policy.setPassport(passport);
                policy.setDrive(drive);
                policy.setForeigner(foreigner);
                policy.setComment(comment);
                policyRepo.save(policy);

                // 검사 호출
                dlpService.runDlpByPolicy(orgSaasId);

                // 저장 성공
                DlpPolicyResp response = DlpPolicyResp.builder()
                        .success(true)
                        .message("Policy Set Success!")
                        .policyId(policy.getId()) // 저장된 정책의 ID를 포함합니다.
                        .policyName(policyName)
                        .build();

                responseList.add(response);
            } else {
                // 저장 실패
                DlpPolicyResp response = DlpPolicyResp.builder()
                        .success(false)
                        .message("OrgSaasId Not Found: " + orgSaasId)
                        .build();

                responseList.add(response);
            }
        }
        return responseList;
    }

    public List<DlpPolicyResp> deletePolicy(DlpPolicyRequest dlpPolicyRequest) {
        List<Integer> policyIds = dlpPolicyRequest.getPolicyId();
        List<DlpPolicyResp> respList = new ArrayList<>();

        for(Integer policyId : policyIds) {
            Optional<Policy> optionalPolicy = policyRepo.findById(policyId);

            if(optionalPolicy.isPresent()) {
                Policy policy = optionalPolicy.get();

                policyRepo.delete(policy);

                DlpPolicyResp resp = DlpPolicyResp.builder()
                        .success(true)
                        .message("Delete Success!")
                        .policyId(policyId)
                        .policyName(null)
                        .build();

                respList.add(resp);
            } else {
                DlpPolicyResp resp = DlpPolicyResp.builder()
                        .success(false)
                        .message("Policy Not Found: " + policyId)
                        .policyId(policyId)
                        .policyName(null)
                        .build();

                respList.add(resp);
            }
        }
        return respList;
    }

    public List<DlpPolicyResp> getPolicyList(DlpPolicyRequest dlpPolicyRequest) {
        Integer orgId = dlpPolicyRequest.getOrgId();
        List<DlpPolicyResp> respList = new ArrayList<>();

        try {
            List<Policy> policyList = policyRepo.findByOrgId(orgId);

            if (policyList.isEmpty()) {
                // 정책이 없을 경우
                DlpPolicyResp resp = DlpPolicyResp.builder()
                        .success(false)
                        .message("No policies found for the given Org ID: " + orgId)
                        .build();
                respList.add(resp);
                return respList;
            }

            for (Policy policy : policyList) {
                OrgSaaS orgSaas = policy.getOrgSaas();
                int orgSaasId = orgSaas.getId();
                SaaS saas = orgSaas.getSaas();
                String saasName = saas.getSaasName();

                // workspace_config에서 alias 가져오기
                Optional<WorkspaceConfig> workspaceConfigOpt = workspaceConfigRepo.findById(orgSaasId);
                String alias = workspaceConfigOpt.map(WorkspaceConfig::getAlias).orElse("Unknown Alias");

                DlpPolicyResp resp = DlpPolicyResp.builder()
                        .success(null)
                        .policyId(policy.getId())
                        .orgSaasId(orgSaasId)
                        .saasName(saasName)
                        .alias(alias)
                        .policyName(policy.getPolicyName())
                        .identify(policy.isIdentify())
                        .passport(policy.isPassport())
                        .drive(policy.isDrive())
                        .foreigner(policy.isForeigner())
                        .description(policy.getDescription())
                        .comment(policy.getComment())
                        .build();
                respList.add(resp);
            }
        } catch (EmptyResultDataAccessException e) {
            // 정책이 없을 때 처리
            DlpPolicyResp resp = DlpPolicyResp.builder()
                    .success(false)
                    .message("No Policy found for Org ID: " + orgId)
                    .build();
            respList.add(resp);
        } catch (Exception e) {
            // 기타 예외 처리
            log.error("Error retrieving policies for Org ID: {}", orgId, e);
            DlpPolicyResp resp = DlpPolicyResp.builder()
                    .success(false)
                    .message("An error occurred while retrieving policies. Please try again later.")
                    .build();
            respList.add(resp);
        }

        return respList;
    }
}
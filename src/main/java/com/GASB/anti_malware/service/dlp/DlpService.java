package com.GASB.anti_malware.service.dlp;

import com.GASB.anti_malware.config.DlpConfig;
import com.GASB.anti_malware.config.RabbitMQProperties;
import com.GASB.anti_malware.model.entity.*;
import com.GASB.anti_malware.repository.dlp.DlpReportRepo;
import com.GASB.anti_malware.repository.dlp.PolicyRepo;
import com.GASB.anti_malware.repository.file.FileUploadRepo;
import com.GASB.anti_malware.repository.file.StoredFileRepo;
import com.GASB.anti_malware.service.S3FileDownloadService;
import com.opencsv.CSVReader;
import com.opencsv.exceptions.CsvException;
import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.extractor.WordExtractor;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xslf.usermodel.XMLSlideShow;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.hslf.usermodel.HSLFSlideShow;
import org.apache.poi.hslf.usermodel.HSLFSlide;
import org.apache.poi.xslf.usermodel.XSLFSlide;
import org.apache.poi.hslf.usermodel.HSLFTextShape;
import org.apache.poi.xslf.usermodel.XSLFTextShape;
// PDFBox
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
// html
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import org.apache.tika.Tika;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import lombok.extern.slf4j.Slf4j;

import java.io.*;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@Slf4j
public class DlpService {

    private final Pattern idRegex;
    private final Pattern passportRegex;
    private final Pattern driveRegex;
    private final Pattern foreignerRegex;
    private final S3FileDownloadService s3FileDownloadService;
    private final FileUploadRepo fileUploadRepo;
    private final StoredFileRepo storedFileRepo;
    private final PolicyRepo policyRepo;
    private final DlpReportRepo dlpReportRepo;
    private final RabbitTemplate alertsRabbitTemplate;
    private final RabbitMQProperties properties;

    @Autowired
    public DlpService(DlpConfig dlpConfig, S3FileDownloadService s3FileDownloadService, FileUploadRepo fileUploadRepo, StoredFileRepo storedFileRepo, PolicyRepo policyRepo, DlpReportRepo dlpReportRepo
    , @Qualifier("alertsRabbitTemplate")RabbitTemplate alertsRabbitTemplate, RabbitMQProperties properties) {
        this.idRegex = dlpConfig.idRegex();
        this.passportRegex = dlpConfig.passportRegex();
        this.driveRegex = dlpConfig.driveRegex();
        this.foreignerRegex = dlpConfig.foreignerRegex();
        this.s3FileDownloadService = s3FileDownloadService;
        this.fileUploadRepo = fileUploadRepo;
        this.storedFileRepo = storedFileRepo;
        this.policyRepo = policyRepo;
        this.dlpReportRepo = dlpReportRepo;
        this.alertsRabbitTemplate = alertsRabbitTemplate;
        this.properties = properties;
    }

    @Async
    public void runDlpByPolicy(Integer orgSaasId) {
        List<FileUpload> fileUploads;

        fileUploads = fileUploadRepo.findFilesByOrgSaasId(orgSaasId);
        for (FileUpload fileUpload : fileUploads) {
            Long uploadId = fileUpload.getId();
            dlpFunc(uploadId);
        }
    }

    @Async
    public void dlpFunc(long fileId) {
        File file = null;
        try {
            String uploadHash = fileUploadRepo.findHashById(fileId);

            if (isDocument(fileId)) {
                file = getFileFromS3(fileId);
                String text = extractText(file);

                List<Policy> policies = getPolicies(fileId);

                for (Policy policy : policies) {
                    StoredFile storedFile = storedFileRepo.findByHash(uploadHash) // storedFileId로 바꿔야할 거 같아요
                            .orElseThrow(() -> new RuntimeException("StoredFile not found"));

                    Long storedFileId = storedFile.getId();

                    if (dlpReportRepo.existsByFileIdAndPolicyId(storedFileId, policy.getId())) {
                        log.info("Policy {} for File ID {} already exists, skipping...", policy.getPolicyName(), storedFileId);
                        continue; // 기록이 있으면 해당 정책 건너뜁니다
                    }

                    // 유빈 추가한 부분
                    boolean isSensitive = false;

                    if (policy.isIdentify()) {
                        Integer idCount = regexCounter(idRegex, text);
                        DlpReport dlpReport = DlpReport.builder()
                                .storedFile(storedFile)
                                .policy(policy)
                                .pii(Pii.builder().id(1).build()) // ID 1로 설정
                                .infoCnt(idCount)
                                .build();
                        dlpReportRepo.save(dlpReport);
                        // 유빈 추가한 부분
                        if(idCount>=1){isSensitive = true;}
                    }

                    if (policy.isPassport()) {
                        Integer passportCount = regexCounter(passportRegex, text);
                        DlpReport dlpReport = DlpReport.builder()
                                .storedFile(storedFile)
                                .policy(policy)
                                .pii(Pii.builder().id(2).build()) // ID 2로 설정
                                .infoCnt(passportCount)
                                .build();
                        dlpReportRepo.save(dlpReport);
                        // 유빈 추가한 부분
                        if(passportCount>=1){isSensitive = true;}
                    }

                    if (policy.isDrive()) {
                        Integer driveCount = regexCounter(driveRegex, text);
                        DlpReport dlpReport = DlpReport.builder()
                                .storedFile(storedFile)
                                .policy(policy)
                                .pii(Pii.builder().id(3).build()) // ID 3으로 설정
                                .infoCnt(driveCount)
                                .build();
                        dlpReportRepo.save(dlpReport);
                        //유빈 추가한 부분
                        if(driveCount>=1){isSensitive = true;}
                    }

                    if (policy.isForeigner()) {
                        Integer foreignerCount = regexCounter(foreignerRegex, text);
                        DlpReport dlpReport = DlpReport.builder()
                                .storedFile(storedFile)
                                .policy(policy)
                                .pii(Pii.builder().id(4).build()) // ID 4로 설정
                                .infoCnt(foreignerCount)
                                .build();
                        dlpReportRepo.save(dlpReport);
                        // 유빈 추가한 부분
                        if(foreignerCount>=1){isSensitive = true;}
                    }

                    // 유빈 추가한 부분
                    if(isSensitive) {
                        long[] numbers = {policy.getId(), fileId}; // 정책 id, 파일 업로드 id
                        alertsRabbitTemplate.convertAndSend(properties.getAlertsDlpRoutingKey(), numbers);
                    }
                }
            } else {
                log.info("Not Document File {}", fileId);
            }
        } catch (Exception e) {
            log.error("Failed to process file with ID: {}", fileId, e);
        } finally {
            if (file != null && file.exists()) {
                boolean deleted = file.delete();
                if (deleted) {
                    log.info("Temporary file deleted: {}", file.getAbsolutePath());
                } else {
                    log.warn("Failed to delete temporary file: {}", file.getAbsolutePath());
                }
            }
        }
    }


    public List<Policy> getPolicies(long fileId) {
        // fileId로 FileUpload 엔티티를 조회
        Optional<FileUpload> fileUploadOptional = fileUploadRepo.findById(fileId);

        if (fileUploadOptional.isPresent()) {
            // FileUpload에서 OrgSaaS 정보를 가져옴
            OrgSaaS orgSaas = fileUploadOptional.get().getOrgSaaS();

            // OrgSaaS ID로 Policy 리스트를 조회
            List<Policy> policies = policyRepo.findByOrgSaasId(orgSaas.getId());

            // 정책이 없으면 예외 처리
            if (policies.isEmpty()) {
                throw new RuntimeException("No policies found for OrgSaaS ID: " + orgSaas.getId());
            }

            return policies;
        } else {
            // fileId에 해당하는 파일이 없는 경우 예외 처리
            throw new RuntimeException("File not found for fileId: " + fileId);
        }
    }


    private boolean isDocument(long fileId) {
        String mimeType = fileUploadRepo.findTypeById(fileId);
        String extension;
        if (Objects.equals(mimeType, "text/plain")) {
            extension = fileUploadRepo.findExtensionById(fileId);
            return Objects.equals(extension, "txt");
        } else {
            return switch (mimeType) {
                case "application/msword",
                     "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                     "application/vnd.ms-excel",
                     "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                     "text/csv",
                     "application/vnd.ms-powerpoint",
                     "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                     "application/pdf",
                     "text/html"
                        -> true;
                default -> false;
            };
        }
    }

    private Integer regexCounter(Pattern pattern, String text) {
        Matcher matcher = pattern.matcher(text);
        int count = 0;
        while (matcher.find()) {
            count++;
        }
        return count;
    }

    private String extractText(File file) {
        String mimeType = getMimeType(file);
        String extractedText = null;

        if (mimeType == null) {
            log.error("Could not determine MIME type for file");
            return null;
        }

        try {
            switch (mimeType) {
                case "application/msword":
                    extractedText = extractTextFromDoc(file);
                    break;
                case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                    extractedText = extractTextFromDocx(file);
                    break;
                case "application/vnd.ms-excel":
                    extractedText = extractTextFromXls(file);
                    break;
                case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
                    extractedText = extractTextFromXlsx(file);
                    break;
                case "text/csv":
                    extractedText = extractTextFromCsv(file);
                    break;
                case "application/vnd.ms-powerpoint":
                    extractedText = extractTextFromPpt(file); // PPT 텍스트 추출 추가
                    break;
                case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
                    extractedText = extractTextFromPptx(file); // PPTX 텍스트 추출 추가
                    break;
                case "application/pdf":
                    extractedText =  extractTextFromPdf(file);
                    break;
                case "text/plain": // 처리할 텍스트 파일의 MIME 타입
                    extractedText = extractTextFromTxt(file);
                    break;
                case "text/html": // html && htm
                    extractedText = extractTextFromHtml(file);
                    break;
                default:
                    log.error("Unsupported MIME type: {}", mimeType);
                    break;
            }
        } catch (Exception e) {
            log.error("Failed to extract text from file: {}", e.getMessage());
        }
        return extractedText;
    }

    public File getFileFromS3(long fileId) throws Exception{

        // 1. fileId로 file_upload.hash 얻어오기
        String hash = fileUploadRepo.findHashById(fileId);

        // 2. hash로 stored_file에서 storedFile객체 찾기
        Optional<StoredFile> optionalStoredFile = storedFileRepo.findByHash(hash);
        if (optionalStoredFile.isEmpty()) {
            throw new Exception("File not found in database");
        }
        StoredFile storedFile = optionalStoredFile.get();

        // 3. savePath를 얻어옴
        String savePath = storedFile.getSavePath();
        String[] parts = savePath.split("/", 2);
        if (parts.length != 2) {
            throw new Exception("Invalid savePath format");
        }

        // 4. bucket과 key, 파일네임 추출
        String bucketName = parts[0];
        String key = parts[1];
        String[] splited = key.split("/");
        String fileName = splited[splited.length - 1];

        // 5. 파일 저장 경로 지정
        File tempFile = new File(fileName);
        try (InputStream inputStream = s3FileDownloadService.downloadFile(bucketName, key);
             FileOutputStream outputStream = new FileOutputStream(tempFile)) {

            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }
        } catch (IOException e) {
            throw new Exception("File save failed");
        }

        return tempFile;
    }

    private String getMimeType(File file) {
        Tika tika = new Tika();
        try {
            return tika.detect(file);
        } catch (IOException e) {
            log.error("Cannot detect MIME type", e);
            return null;
        }
    }

    // Word(.docx)
    private String extractTextFromDocx(File file) throws IOException {
        try (FileInputStream fis = new FileInputStream(file); XWPFDocument document = new XWPFDocument(fis)) {
            XWPFWordExtractor extractor = new XWPFWordExtractor(document);
            return extractor.getText();
        }
    }
    // Word(.doc)
    private String extractTextFromDoc(File file) throws IOException {
        try (FileInputStream fis = new FileInputStream(file); HWPFDocument document = new HWPFDocument(fis)) {
            WordExtractor extractor = new WordExtractor(document);
            return extractor.getText();
        }
    }
    // Excel(.xlsx)
    private String extractTextFromXlsx(File file) throws IOException {
        try (FileInputStream fis = new FileInputStream(file); XSSFWorkbook workbook = new XSSFWorkbook(fis)) {
            StringBuilder text = new StringBuilder();
            for (Sheet sheet : workbook) {
                for (Row row : sheet) {
                    for (Cell cell : row) {
                        text.append(cell.toString()).append("\t");
                    }
                    text.append("\n");
                }
            }
            return text.toString();
        }
    }
    // Excel(.xls)
    private String extractTextFromXls(File file) throws IOException {
        try (FileInputStream fis = new FileInputStream(file); HSSFWorkbook workbook = new HSSFWorkbook(fis)) {
            StringBuilder text = new StringBuilder();
            for (Sheet sheet : workbook) {
                for (Row row : sheet) {
                    for (Cell cell : row) {
                        text.append(cell.toString()).append("\t");
                    }
                    text.append("\n");
                }
            }
            return text.toString();
        }
    }
    // Excel(.csv)
    private String extractTextFromCsv(File file) throws IOException {
        try (CSVReader reader = new CSVReader(new FileReader(file))) {
            StringBuilder text = new StringBuilder();
            List<String[]> rows = reader.readAll(); // 모든 행을 읽어옵니다.
            for (String[] row : rows) {
                for (String cell : row) {
                    text.append(cell).append(","); // 셀을 문자열로 변환하고 콤마를 추가합니다.
                }
                text.append("\n"); // 행 구분을 위해 줄 바꿈을 추가합니다.
            }
            return text.toString();
        } catch (CsvException e) {
            log.error("Failed to read CSV file: {}", file.getPath(), e);
            throw new IOException("Error reading CSV file", e);
        }
    }
    // PowerPoint(.ppt)
    private String extractTextFromPpt(File file) throws IOException {
        try (FileInputStream fis = new FileInputStream(file); HSLFSlideShow ppt = new HSLFSlideShow(fis)) {
            StringBuilder text = new StringBuilder();
            for (HSLFSlide slide : ppt.getSlides()) {
                slide.getShapes().stream()
                        .filter(shape -> shape instanceof HSLFTextShape)
                        .map(shape -> ((HSLFTextShape) shape).getText())
                        .forEach(text::append);
                text.append("\n");
            }
            return text.toString();
        }
    }
    // PowerPoint(.pptx)
    private String extractTextFromPptx(File file) throws IOException {
        try (FileInputStream fis = new FileInputStream(file); XMLSlideShow pptx = new XMLSlideShow(fis)) {
            StringBuilder text = new StringBuilder();
            for (XSLFSlide slide : pptx.getSlides()) {
                slide.getShapes().stream()
                        .filter(shape -> shape instanceof XSLFTextShape)
                        .map(shape -> ((XSLFTextShape) shape).getText())
                        .forEach(text::append);
                text.append("\n");
            }
            return text.toString();
        }
    }
    // PDF(.pdf)
    private String extractTextFromPdf(File file) throws IOException {
        try (FileInputStream fis = new FileInputStream(file); PDDocument document = PDDocument.load(fis)) {
            PDFTextStripper pdfStripper = new PDFTextStripper();
            return pdfStripper.getText(document);
        }
    }
    // TEXT(.txt)
    private String extractTextFromTxt(File file)  throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            StringBuilder text = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                text.append(line).append("\n");
            }
            return text.toString();
        }
    }
    // HTML
    private String extractTextFromHtml(File file) throws IOException {
        Document document = Jsoup.parse(file, "UTF-8");
        return document.text();
    }
}

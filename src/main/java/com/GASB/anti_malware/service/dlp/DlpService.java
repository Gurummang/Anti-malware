package com.GASB.anti_malware.service.dlp;

import com.opencsv.CSVReader;
import com.opencsv.exceptions.CsvException;
import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.extractor.WordExtractor;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.tika.Tika;
import org.springframework.stereotype.Service;
import lombok.extern.slf4j.Slf4j;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;

@Service
@Slf4j
public class DlpService {

    public void extractText(String filePath) {
        File file = new File(filePath);
        String mimeType = getMimeType(file);

        if (mimeType == null) {
            log.error("Could not determine MIME type for file: " + filePath);
            return;
        }

        try {
            switch (mimeType) {
                case "application/msword":
                    extractTextFromDoc(file);
                    break;
                case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                    extractTextFromDocx(file);
                    break;
                case "application/vnd.ms-excel":
                    extractTextFromXls(file);
                    break;
                case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
                    extractTextFromXlsx(file);
                    break;
                case "text/csv":
                    extractTextFromCsv(file);
                    break;
                default:
                    log.error("Unsupported MIME type: " + mimeType);
                    break;
            }
        } catch (Exception e) {
            log.error("Failed to extract text from file: " + filePath, e);
        }
    }

    private String getMimeType(File file) {
        Tika tika = new Tika();
        try {
            return tika.detect(file);
        } catch (IOException e) {
            log.error("Cannot detect MIME type", e);
            return null;
        }
    }

    // Word(.docx)
    private void extractTextFromDocx(File file) throws IOException {
        try (FileInputStream fis = new FileInputStream(file); XWPFDocument document = new XWPFDocument(fis)) {
            XWPFWordExtractor extractor = new XWPFWordExtractor(document);
            String text = extractor.getText();
            System.out.println("\n------------ .docx ------------\n" + text);
        }
    }
    // Word(.doc)
    private void extractTextFromDoc(File file) throws IOException {
        try (FileInputStream fis = new FileInputStream(file); HWPFDocument document = new HWPFDocument(fis)) {
            WordExtractor extractor = new WordExtractor(document);
            String text = extractor.getText();
            System.out.println("\n------------ .doc ------------\n" + text);
        }
    }
    // Excel(.xlsx)
    private void extractTextFromXlsx(File file) throws IOException {
        try (FileInputStream fis = new FileInputStream(file); XSSFWorkbook workbook = new XSSFWorkbook(fis)) {
            StringBuilder text = new StringBuilder();
            for (Sheet sheet : workbook) {
                for (Row row : sheet) {
                    for (Cell cell : row) {
                        text.append(cell.toString()).append("\t");
                    }
                    text.append("\n");
                }
            }
            System.out.println("\n------------ .xlsx ------------\n" + text);
        }
    }
    // Excel(.xls)
    private void extractTextFromXls(File file) throws IOException {
        try (FileInputStream fis = new FileInputStream(file); HSSFWorkbook workbook = new HSSFWorkbook(fis)) {
            StringBuilder text = new StringBuilder();
            for (Sheet sheet : workbook) {
                for (Row row : sheet) {
                    for (Cell cell : row) {
                        text.append(cell.toString()).append("\t");
                    }
                    text.append("\n");
                }
            }
            System.out.println("\n------------ .xls ------------\n" + text);
        }
    }
    // Excel(.csv)
    private void extractTextFromCsv(File file) throws IOException {
        try (CSVReader reader = new CSVReader(new FileReader(file))) {
            StringBuilder text = new StringBuilder();
            List<String[]> rows = reader.readAll(); // 모든 행을 읽어옵니다.
            for (String[] row : rows) {
                for (String cell : row) {
                    text.append(cell).append(","); // 셀을 문자열로 변환하고 콤마를 추가합니다.
                }
                text.append("\n"); // 행 구분을 위해 줄 바꿈을 추가합니다.
            }
            System.out.println("\n------------ .csv ------------\n" + text);
        } catch (CsvException e) {
            log.error("Failed to read CSV file: " + file.getPath(), e);
            throw new IOException("Error reading CSV file", e);
        }
    }
}

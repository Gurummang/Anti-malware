package com.GASB.anti_malware.service.dlp;

import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.usermodel.Picture;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.xwpf.usermodel.*;
import org.apache.tika.Tika;
import org.apache.tika.exception.TikaException;
import org.springframework.stereotype.Service;
import lombok.extern.slf4j.Slf4j;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

@Service
@Slf4j
public class DlpService {
    public void dlpTika() {
        // DOCX 파일의 경로를 지정합니다.
        File file = new File("src/main/java/com/GASB/anti_malware/files/doc/test.docx");

        // Tika 인스턴스를 생성합니다.
        Tika tika = new Tika();

        try {
            // Tika를 사용하여 파일의 MIME 타입을 감지합니다.
            String mimeType = tika.detect(file);

            // 감지된 MIME 타입을 로그로 출력합니다.
            System.out.println("MIME 타입: " + mimeType);

            // MIME 타입에 따라 텍스트 추출을 진행합니다.
            if (mimeType.equals("application/vnd.openxmlformats-officedocument.wordprocessingml.document")) {
                // DOCX 파일일 경우 텍스트 추출
                String extractedText = tika.parseToString(file);
                if(extractedText.isEmpty() || extractedText.isBlank()) {
                    System.out.println("파일이 비었음!");
                } else {
                    System.out.println("파일 내용: " + extractedText);
                }
            } else {
                System.out.println("지원하지 않는 파일 형식입니다: " + mimeType);
            }
        } catch (IOException | TikaException e) {
            // 파일 읽기 또는 텍스트 추출 중 오류가 발생한 경우 예외를 처리합니다.
            System.out.println("[ERROR] " + e.getMessage());
        }
    }


    public void dlpPOI() {
        String filePath = "src/main/java/com/GASB/anti_malware/files/doc/[KISIA] S-개발자 프로젝트 보고서 - 구름망-8_01.docx";
        if (filePath.endsWith(".doc")) {
            extractTextAndImagesFromDoc(filePath);
        } else if (filePath.endsWith(".docx")) {
            extractTextAndImagesFromDocx(filePath);
        } else {
            System.out.println("[ERROR] Unsupported file format");
        }
    }

    private void extractTextAndImagesFromDoc(String filePath) {
        try (FileInputStream fis = new FileInputStream(filePath);
             HWPFDocument document = new HWPFDocument(fis)) {

            // 문서에서 이미지 목록을 가져옵니다.
            List<Picture> pictures = document.getPicturesTable().getAllPictures();

            for (int i = 0; i < pictures.size(); i++) {
                Picture picture = pictures.get(i);
                String imageFileName = "extracted_image_" + (i + 1) + "." + picture.suggestFileExtension();
                try (FileOutputStream fos = new FileOutputStream(imageFileName)) {
                    fos.write(picture.getContent());
                    System.out.println("파일 첨부 이미지 저장: " + imageFileName);
                }
            }

            // 문서의 텍스트를 출력합니다.
            Range range = document.getRange();
            String text = range.text();
            System.out.println("파일 내용: " + text);

        } catch (IOException e) {
            System.out.println("[ERROR] " + e.getMessage());
        }
    }

    private void extractTextAndImagesFromDocx(String filePath) {
        try (FileInputStream fis = new FileInputStream(filePath);
             XWPFDocument document = new XWPFDocument(fis)) {

            // Extract text

//            for (XWPFParagraph paragraph : document.getParagraphs()) {
//                textBuilder.append(paragraph.getText()).append("\n");
//            }

            // Extract text from tables
            StringBuilder textBuilder = new StringBuilder();
            for (XWPFTable table : document.getTables()) {
                for (XWPFTableRow row : table.getRows()) {
                    for (XWPFTableCell cell : row.getTableCells()) {
                        textBuilder.append(cell.getText()).append("\n");
                    }
                }
            }

            String text = textBuilder.toString();
            System.out.println("파일 내용: " + text);

            // Extract images
            // 일단 이미지 추출은 배제
//            List<XWPFPictureData> pictures = document.getAllPictures();
//            for (int i = 0; i < pictures.size(); i++) {
//                XWPFPictureData picture = pictures.get(i);
//                String imageFileName = "extracted_image_" + (i + 1) + "." + picture.suggestFileExtension();
//                try (FileOutputStream fos = new FileOutputStream(imageFileName)) {
//                    fos.write(picture.getData());
//                    System.out.println("파일 첨부 이미지 저장: " + imageFileName);
//                }
//            }

        } catch (IOException e) {
            System.out.println("[ERROR] " + e.getMessage());
        }
    }
}

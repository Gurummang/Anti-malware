package com.GASB.anti_malware.service;

import com.GASB.anti_malware.model.dto.response.*;
import com.GASB.anti_malware.model.entity.FileStatus;
import com.GASB.anti_malware.model.entity.ScanTable;
import com.GASB.anti_malware.model.entity.StoredFile;
import com.GASB.anti_malware.model.entity.VtReport;
import com.GASB.anti_malware.repository.FileStatusRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import com.GASB.anti_malware.repository.StoredFileRepository;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class StoredFileService {

        private final StoredFileRepository storedFileRepository;
        private final ModelMapper modelMapper;

        @Autowired
        public StoredFileService(StoredFileRepository storedFileRepository
                , ModelMapper modelMapper) {
            this.storedFileRepository = storedFileRepository;
            this.modelMapper = modelMapper;
        }

        public void saveStoredFile(StoredFile storedFile) {
            // FileStatus 객체 생성
            FileStatus fileStatus = new FileStatus();
            fileStatus.setStoredFile(storedFile);
            storedFile.setFileStatus(fileStatus); // 파일 status -1로 자동 설정

            storedFileRepository.save(storedFile);
        }

        public boolean existsBySaltedHash(String saltedHash) {
            return storedFileRepository.findBySaltedHash(saltedHash).isPresent();
        }

        // 전체 파일 리스트 반환
        public ResponseDto.FileListResponse getFileList() {
            List<FileListDto> fileList = storedFileRepository.findAll()
                    .stream()
                    .map(storedFile -> {
                        VtReport vtReport = storedFile.getVtReport();
                        FileStatus fileStatus = storedFile.getFileStatus();
                        ScanTable scanTable = storedFile.getScanTable();
                        VtReportDto vtReportDto = (vtReport != null) ? convertToVtReportDto(vtReport) : null;
                        FileStatusDto fileStatusDto = convertToFileStatusDto(fileStatus);

                        InnerScanDto innerScanDto = InnerScanDto.builder()
                                .step2Detail(null) // Set step2Detail as needed
                                .build();

                        return FileListDto.builder()
                                .id(storedFile.getId())
                                .saltedHash(storedFile.getSaltedHash())
                                .size(storedFile.getSize())
                                .type(storedFile.getType())
                                .vtReport(vtReportDto)
                                .fileStatus(fileStatusDto)
                                .GScan(innerScanDto)
                                .build();
                    }).collect(Collectors.toList());

            int totalFiles = fileList.size();
            int malwareTotal = (int) fileList.stream()
                    .filter(fileListDto -> {
                        VtReportDto vtReport = fileListDto.getVtReport();
                        return vtReport != null && !vtReport.getThreatLabel().equals("none");
                    })
                    .count();

            return ResponseDto.FileListResponse.of(totalFiles, malwareTotal, fileList);
        }

        private VtReportDto convertToVtReportDto(VtReport vtReport) {
                return modelMapper.map(vtReport, VtReportDto.class);
        }

        private FileStatusDto convertToFileStatusDto(FileStatus fileStatus){
                return modelMapper.map(fileStatus, FileStatusDto.class);
        }
}


package com.GASB.anti_malware.controller;

import com.GASB.anti_malware.model.dto.response.FileListDto;
import com.GASB.anti_malware.model.dto.response.ResponseDto;
import com.GASB.anti_malware.model.entity.StoredFile;
import com.GASB.anti_malware.service.FileStatusService;
import com.GASB.anti_malware.service.InnerCheckService;
import com.GASB.anti_malware.service.StoredFileService;
import com.GASB.anti_malware.service.VtReportSaveService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/files")
public class FileController {

    private final StoredFileService storedFileService;
    private final InnerCheckService innerCheckService;
    private final VtReportSaveService vtReportSaveService;

    @Autowired
    public FileController(StoredFileService storedFileService, VtReportSaveService vtReportSaveService
    , InnerCheckService innerCheckService){
        this.storedFileService = storedFileService;
        this.vtReportSaveService = vtReportSaveService;
        this.innerCheckService = innerCheckService;
    }

    @GetMapping
    public ResponseDto<ResponseDto.FileListResponse> getFileList() {
        try {
            ResponseDto.FileListResponse fileListResponse = storedFileService.getFileList();
            return ResponseDto.ofSuccess(fileListResponse);
        } catch (Exception e){
            return ResponseDto.ofFail(e.getMessage());
        }
    }

    @PostMapping("/save")
    public ResponseDto<String> storeFile(@RequestBody List<StoredFile> storedFiles) {
        try {// 이미 존재하는 해시값인지 확인
            StringBuilder responseMessage = new StringBuilder();
            for (StoredFile storedFile : storedFiles) {
                if (storedFileService.existsBySaltedHash(storedFile.getSaltedHash())) {
                    // 중복일 경우, 성공 응답 반환
                    return ResponseDto.ofSuccess("File already exists.");
                }

                // 중복이 아닐 경우, 저장 처리
                storedFileService.saveStoredFile(storedFile);

                // 비동기 작업 시작 : 확장자, 헤더시그니처, 밈타입 일치 여부
                innerCheckService.detectMimeType(storedFile.getId());
                // 비동기 작업 시작: 리포트 존재 유무
                vtReportSaveService.processReport(storedFile.getId());
                responseMessage.append("File stored successfully ").append(storedFile.getSavePath()).append(". ");

            }
            return ResponseDto.ofSuccess(responseMessage.toString());
        } catch (Exception e){
            return ResponseDto.ofFail(e.getMessage());
        }
    }
}

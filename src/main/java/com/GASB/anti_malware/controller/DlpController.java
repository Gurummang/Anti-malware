package com.GASB.anti_malware.controller;

import com.GASB.anti_malware.annotation.JWT.ValidateJWT;
import com.GASB.anti_malware.model.dto.request.DlpPolicyRequest;
import com.GASB.anti_malware.model.dto.response.DlpPolicyResp;
import com.GASB.anti_malware.model.dto.response.ValidateDto;
import com.GASB.anti_malware.repository.org.AdminRepo;
import com.GASB.anti_malware.service.dlp.DlpPolicyService;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/v1/dlp")
public class DlpController {

    private final DlpPolicyService dlpPolicyService;
    private final AdminRepo adminRepo;

    @Autowired
    public DlpController(DlpPolicyService dlpPolicyService, AdminRepo adminRepo) {
        this.dlpPolicyService = dlpPolicyService;
        this.adminRepo = adminRepo;
    }

    // Policy CRUD
    @PostMapping("/policy/make")
    @ValidateJWT
    public List<DlpPolicyResp> setPolicy(@RequestBody DlpPolicyRequest dlpPolicyRequest, HttpServletRequest servletRequest){
        ValidateDto validateDto = validateJwt(servletRequest);
        List<DlpPolicyResp> dlpPolicyRespList = new ArrayList<>();
        if(validateDto.getErrorMessage() != null){
            DlpPolicyResp resp = DlpPolicyResp.builder()
                    .success(false)
                    .message(validateDto.getErrorMessage())
                    .build();
            dlpPolicyRespList.add(resp);
            return dlpPolicyRespList;
        } else if (validateDto.getExceptionMessage() != null) {
            DlpPolicyResp resp = DlpPolicyResp.builder()
                    .success(false)
                    .message(validateDto.getExceptionMessage())
                    .build();
            dlpPolicyRespList.add(resp);
            return dlpPolicyRespList;
        }
        return dlpPolicyService.setPolicy(dlpPolicyRequest);
    }

    @PostMapping("/policy/delete")
    @ValidateJWT
    public List<DlpPolicyResp> deletePolicy(@RequestBody DlpPolicyRequest dlpPolicyRequest, HttpServletRequest servletRequest) {
        ValidateDto validateDto = validateJwt(servletRequest);
        List<DlpPolicyResp> dlpPolicyRespList = new ArrayList<>();
        if(validateDto.getErrorMessage() != null){
            DlpPolicyResp resp = DlpPolicyResp.builder()
                    .success(false)
                    .message(validateDto.getErrorMessage())
                    .build();
            dlpPolicyRespList.add(resp);
            return dlpPolicyRespList;
        } else if (validateDto.getExceptionMessage() != null) {
            DlpPolicyResp resp = DlpPolicyResp.builder()
                    .success(false)
                    .message(validateDto.getExceptionMessage())
                    .build();
            dlpPolicyRespList.add(resp);
            return dlpPolicyRespList;
        }
        return dlpPolicyService.deletePolicy(dlpPolicyRequest);
    }

    @GetMapping("/policy/list")
    @ValidateJWT
    public List<DlpPolicyResp> getPolicyList(HttpServletRequest servletRequest) {
        ValidateDto validateDto = validateJwt(servletRequest);
        return dlpPolicyService.getPolicyList(validateDto);
    }

    private ValidateDto validateJwt(HttpServletRequest servletRequest) {
        ValidateDto validateDto = new ValidateDto();

        // JWT 검증 실패 시 바로 반환
        String errorMessage = (String) servletRequest.getAttribute("error");
        if (errorMessage != null) {
            validateDto.setErrorMessage(errorMessage);
            return validateDto;  // 더 이상 진행하지 않음
        }

        // JWT 검증 성공 후 orgId 조회
        try {
            String email = (String) servletRequest.getAttribute("email");
            long orgId = adminRepo.findByEmail(email)
                    .orElseThrow(() -> new NoSuchElementException("Admin not found with email: " + email))
                    .getOrg()
                    .getId();
            validateDto.setOrgId(orgId);
        } catch (RuntimeException e) {
            validateDto.setExceptionMessage(e.getMessage());
        }

        return validateDto;
    }

}
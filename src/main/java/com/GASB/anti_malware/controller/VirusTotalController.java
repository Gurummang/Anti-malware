package com.GASB.anti_malware.controller;

import com.GASB.anti_malware.config.RabbitMQProperties;
import com.GASB.anti_malware.model.dto.request.FileUploadPayload;
import com.GASB.anti_malware.model.dto.request.VtRequestDto;
import com.GASB.anti_malware.model.dto.response.FileListDto;
import com.GASB.anti_malware.model.dto.response.ResponseDto;
import com.GASB.anti_malware.model.dto.response.Result;
import com.GASB.anti_malware.model.dto.response.VtUploadResponse;
import com.GASB.anti_malware.service.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/api/v1/vt")
public class VirusTotalController {

    private final VtReportSaveService vtReportSaveService;
    private final VtUploadService VtUploadService;
    private final FileStatusService fileStatusService;
    private final RabbitTemplate rabbitTemplate;
    private final ObjectMapper objectMapper;
    private final RabbitMQProperties properties;

    @Autowired
    public VirusTotalController(VtReportSaveService vtReportSaveService, VtUploadService VtUploadService,
                                FileStatusService fileStatusService, RabbitTemplate rabbitTemplate
    , ObjectMapper objectMapper, RabbitMQProperties properties) {
        this.vtReportSaveService = vtReportSaveService;
        this.VtUploadService = VtUploadService;
        this.fileStatusService = fileStatusService;
        this.rabbitTemplate = rabbitTemplate;
        this.objectMapper = objectMapper;
        this.properties = properties;
    }

    @GetMapping
    public String hello(){
        return "Hello yubin world";
    }

    @PostMapping("/report/{file_id}")
    public ResponseDto<String> saveReport(@PathVariable long file_id) {
        try {
            Result result = vtReportSaveService.saveReportById(file_id);
            if (result.isSuccess()) {
                return ResponseDto.ofSuccess(file_id, result.getMessage());
            }
            return ResponseDto.ofFail(file_id, result.getMessage());
        } catch (Exception e) {
            return ResponseDto.ofFail(file_id, e.getMessage());
        }
    }

    @PostMapping("/upload")
    public ResponseDto<List<VtUploadResponse>> vtUpload(@RequestBody VtRequestDto vtRequestDto) {
        try {
            List<VtUploadResponse> results = new ArrayList<>();
            for (Long fileId : vtRequestDto.getFileIds()) {
                // 파일 상태 확인
                int vtStatus = fileStatusService.getVtStatusByFileId(fileId);
                if (vtStatus != -1) {
                    results.add(VtUploadResponse.builder()
                            .fileId(fileId)
                            .analysisId("Report Already exists.")
                            .build());
                    continue;
                }
                Result result = VtUploadService.uploadFileFromS3(fileId); // 파일 ID로 업로드 처리

                if (result.isSuccess()) {
                    // RabbitMQ 큐에 메시지 전송
                    FileUploadPayload payload = new FileUploadPayload(result.getMessage(), fileId);
                    String request = objectMapper.writeValueAsString(payload);
                    rabbitTemplate.convertAndSend(properties.getVtUploadRoutingKey(), request);
                }

                results.add(VtUploadResponse.builder()
                        .fileId(fileId)
                        .analysisId(result.getMessage())
                        .build());
            }
            return ResponseDto.ofSuccess(results);
        } catch (Exception e) {
            return ResponseDto.ofFail(e.getMessage());
        }
    }

    @GetMapping("/unscan")
    public ResponseDto<List<FileListDto>> getUncheckedFiles() {
        try {
            List<FileListDto> response = fileStatusService.getFileWithUnScannedVt();
            return ResponseDto.ofSuccess(response);
        } catch(Exception e){
            return ResponseDto.ofFail(e.getMessage());
        }
    }

}

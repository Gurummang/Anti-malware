package com.GASB.anti_malware.controller;

import com.GASB.anti_malware.model.dto.request.VtRequestDto;
import com.GASB.anti_malware.model.dto.response.FileListDto;
import com.GASB.anti_malware.model.dto.response.ResponseDto;
import com.GASB.anti_malware.model.dto.response.VtUploadResult;
import com.GASB.anti_malware.service.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/v1/vt")
public class VirusTotalController {

    private final StoredFileService storedFileService;
    private final VtReportSaveService vtReportSaveService;
    private final VtUploadService vtUploadService;
    private final VtAnalysisService vtAnalysisService;
    private final FileStatusService fileStatusService;

    @Autowired
    public VirusTotalController(StoredFileService storedFileService,
                                VtReportSaveService vtReportSaveService, VtUploadService vtUploadService,
                                VtAnalysisService vtAnalysisService, FileStatusService fileStatusService) {
        this.storedFileService = storedFileService;
        this.vtReportSaveService = vtReportSaveService;
        this.vtUploadService = vtUploadService;
        this.vtAnalysisService = vtAnalysisService;
        this.fileStatusService = fileStatusService;
    }

    @PostMapping("/report/{file_id}")
    public ResponseDto<String> saveReport(@PathVariable long file_id) {
        try {
            String result = vtReportSaveService.saveReportById(file_id);
            if (result.contains("Error")) {
                return ResponseDto.ofFail(file_id, result);
            }
            return ResponseDto.ofSuccess(file_id, result);
        } catch (Exception e) {
            return ResponseDto.ofFail(file_id, e.getMessage());
        }
    }

    @PostMapping("/upload")
    public ResponseDto<Map<Long, String>> vtUpload(@RequestBody VtRequestDto vtRequestDto) {
        try {
            Map<Long, String> results = new HashMap<>();
            for (Long fileId : vtRequestDto.getFileIds()) {
                // 파일 상태 확인
                int vtStatus = storedFileService.getVtStatusByFileId(fileId);
                if (vtStatus != -1) {
                    results.put(fileId, "Report Already exists.");
                    continue;
                }

                VtUploadResult result = vtUploadService.uploadFile(fileId); // 파일 ID로 업로드 처리
                results.put(fileId, result.getMessage());

                if (result.isSuccess()) {
                    vtAnalysisService.pollAnalysisStatus(result.getMessage(), fileId); // 비동기로 처리되는 부분
                }
            }
            return ResponseDto.ofSuccess(results);
        } catch (Exception e) {
            return ResponseDto.ofFail(e.getMessage());
        }
    }

    @GetMapping("/unscan")
    public ResponseDto<List<FileListDto>> getUncheckedFiles() {
        try {
            List<FileListDto> response = fileStatusService.getFileWithUnScannedVt();
            return ResponseDto.ofSuccess(response);
        } catch(Exception e){
            return ResponseDto.ofFail(e.getMessage());
        }
    }

}

package com.GASB.anti_malware.controller;

import com.GASB.anti_malware.model.dto.request.VtRequestDto;
import com.GASB.anti_malware.model.dto.response.ResponseDto;
import com.GASB.anti_malware.model.dto.response.VtReportDto;
import com.GASB.anti_malware.service.VtAnalysisService;
import com.GASB.anti_malware.service.VtReportSaveService;
import com.GASB.anti_malware.service.VtReportReturnService;
import com.GASB.anti_malware.service.VtUploadService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/v1/vt")
public class VirusTotalController {

    private final VtReportReturnService vtReportReturnService;
    private final VtReportSaveService vtReportSaveService;
    private final VtUploadService vtUploadService;
    private final VtAnalysisService vtAnalysisService;

    @Autowired
    public VirusTotalController(VtReportReturnService vtReportReturnService,
                                VtReportSaveService vtReportSaveService, VtUploadService vtUploadService, VtAnalysisService vtAnalysisService) {
        this.vtReportReturnService = vtReportReturnService;
        this.vtReportSaveService = vtReportSaveService;
        this.vtUploadService = vtUploadService;
        this.vtAnalysisService = vtAnalysisService;
    }

    @PostMapping("/report/{file_id}")
    public ResponseEntity<ResponseDto<String>> saveReport(@PathVariable long file_id) {
        try {
            String result = vtReportSaveService.saveReportById(file_id);
            if (result.contains("Error")) {
                return ResponseEntity.badRequest().body(ResponseDto.ofFail(file_id, result));
            }
            return ResponseEntity.ok(ResponseDto.ofSuccess(file_id, result));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ResponseDto.ofFail(file_id, e.getMessage()));
        }
    }

    @GetMapping("/report/{file_id}")
    public ResponseEntity<ResponseDto<VtReportDto>> getReport(@PathVariable long file_id) {
        try {
            // 파일 ID를 기반으로 리포트를 가져옵니다.
            VtReportDto reportDto = vtReportReturnService.getReportById(file_id);

            // 리포트가 존재하지 않을 경우 404 Not Found 반환
            if (reportDto == null) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(ResponseDto.ofFail(file_id, "Report not found."));
            }

            // 리포트가 존재할 경우 200 OK 반환
            return ResponseEntity.ok(ResponseDto.ofSuccess(file_id, reportDto));

        } catch (Exception e) {
            // 예외 발생 시 500 Internal Server Error 반환
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ResponseDto.ofFail(file_id, e.getMessage()));
        }
    }

    @PostMapping("/upload")
    public ResponseEntity<ResponseDto<Map<Long, String>>> vtUpload(@RequestBody VtRequestDto vtRequestDto) {
        try {
            Map<Long, String> results = new HashMap<>();
            for (Long fileId : vtRequestDto.getFileIds()) {
                String result = vtUploadService.uploadFile(fileId); // 파일 ID로 업로드 처리
                results.put(fileId, result);
                vtAnalysisService.pollAnalysisStatus(result, fileId);
            }
            return ResponseEntity.ok(ResponseDto.ofSuccess(results));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ResponseDto.ofFail(e.getMessage()));
        }
    }

}

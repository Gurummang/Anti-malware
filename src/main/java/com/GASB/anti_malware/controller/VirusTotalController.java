package com.GASB.anti_malware.controller;

import com.GASB.anti_malware.annotation.JWT.ValidateJWT;
import com.GASB.anti_malware.config.RabbitMQProperties;
import com.GASB.anti_malware.model.dto.request.VtRequestDto;
import com.GASB.anti_malware.model.dto.response.ResponseDto;
import com.GASB.anti_malware.model.dto.response.VtUploadResponse;
import com.GASB.anti_malware.repository.file.FileUploadRepo;
import com.GASB.anti_malware.repository.file.StoredFileRepo;
import com.GASB.anti_malware.repository.org.AdminRepo;
import com.GASB.anti_malware.service.*;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/v1/vt")
public class VirusTotalController {

    private final FileStatusService fileStatusService;
    private final StoredFileRepo storedFileRepository;
    private final RabbitTemplate rabbitTemplate;
    private final RabbitMQProperties properties;
    private final AdminRepo adminRepo;
    private final FileUploadRepo fileUploadRepo;

    @Autowired
    public VirusTotalController(FileStatusService fileStatusService, StoredFileRepo storedFileRepository, RabbitTemplate rabbitTemplate, RabbitMQProperties properties, AdminRepo adminRepo, FileUploadRepo fileUploadRepo) {
        this.fileStatusService = fileStatusService;
        this.storedFileRepository = storedFileRepository;
        this.rabbitTemplate = rabbitTemplate;
        this.properties = properties;
        this.adminRepo = adminRepo;
        this.fileUploadRepo = fileUploadRepo;
    }

    @GetMapping
    public String hello(){
        return "Hello yubin world";
    }

    @PostMapping("/upload")
    @ValidateJWT
    public ResponseDto<List<VtUploadResponse>> vtUpload(@RequestBody VtRequestDto vtRequestDto, HttpServletRequest servletRequest) {
        Map<String, Object> response = new HashMap<>();

        // JWT 검증 실패 시 에러 메시지 반환
        String errorMessage = (String) servletRequest.getAttribute("error");
        if (errorMessage != null) {
            response.put("status", 401);
            response.put("error_message", errorMessage);
            return ResponseDto.ofFail(response);
        }

        try {
            // 요청한 사용자(Admin)의 이메일을 통해 orgId 조회
            String email = (String) servletRequest.getAttribute("email");
            long orgId = adminRepo.findByEmail(email)
                    .orElseThrow(() -> new NoSuchElementException("Admin not found with email: " + email))
                    .getOrg()
                    .getId();

            List<VtUploadResponse> results = new ArrayList<>();

            // 파일 ID 목록에 대한 처리
            for (Long fileId : vtRequestDto.getFileIds()) {
                if (!fileUploadRepo.findOrgIdByHash(fileId).orElseThrow(() ->
                                new NoSuchElementException("File not found with id: " + fileId))
                        .equals(orgId)) {
                    response.put("status", 401);
                    response.put("error_message", "Unauthorized access to file.");
                    return ResponseDto.ofFail(response);
                }

                // 파일 상태에 따른 처리
                int vtStatus = fileStatusService.getVtStatusByFileId(fileId);
                VtUploadResponse.VtUploadResponseBuilder responseBuilder = VtUploadResponse.builder().fileId(fileId);

                if (vtStatus == 1) {
                    results.add(responseBuilder.analysisId("Report Already exists.").build());
                } else if (vtStatus == 0) {
                    results.add(responseBuilder.analysisId("Analysis is processing.").build());
                } else {
                    // 새 분석 요청
                    rabbitTemplate.convertAndSend(properties.getVtUploadRoutingKey(), fileId);
                    results.add(responseBuilder.analysisId("Upload Request Success.").build());
                }
            }

            // 성공 응답 반환
            return ResponseDto.ofSuccess(results);

        } catch (Exception e) {
            // 에러 처리
            return ResponseDto.ofFail(e.getMessage());
        }
    }


//    @GetMapping("/unscan")
//    public ResponseDto<List<FileListDto>> getUncheckedFiles() {
//        try {
//            List<FileListDto> response = fileStatusService.getFileWithUnScannedVt();
//            return ResponseDto.ofSuccess(response);
//        } catch(Exception e){
//            return ResponseDto.ofFail(e.getMessage());
//        }
//    }

}

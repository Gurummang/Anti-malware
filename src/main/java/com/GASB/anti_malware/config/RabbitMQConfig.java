package com.GASB.anti_malware.config;

import org.springframework.amqp.core.*;
import org.springframework.amqp.rabbit.annotation.EnableRabbit;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableRabbit
public class RabbitMQConfig {

    private final RabbitMQProperties properties;

    public RabbitMQConfig(RabbitMQProperties properties) {
        this.properties = properties;
    }

    // 큐 설정
    @Bean
    public Queue fileQueue() {
        return new Queue(properties.getFileQueue(), true, false, false);
    }

    @Bean
    public Queue vtReportQueue() {
        return new Queue(properties.getVtReportQueue(), true, false, false);
    }

    @Bean
    public Queue grmScanQueue() {
        return new Queue(properties.getGrmScanQueue(), true, false, false);
    }

    @Bean
    public Queue vtUploadQueue() {
        return new Queue(properties.getVtUploadQueue(), true, false, false);
    }

    @Bean
    public Queue exeScanQueue() {
        return new Queue(properties.getExeScanQueue(), true, false, false);
    }

    @Bean
    public Queue imgScanQueue() {
        return new Queue(properties.getImgScanQueue(), true, false, false);
    }

    @Bean
    public Queue docScanQueue() {
        return new Queue(properties.getDocScanQueue(), true, false, false);
    }

    // 알림을 위한 큐
    @Bean
    public Queue alertsVtQueue(){
        return new Queue(properties.getAlertsVtQueue(), true, false, false);
    }

    @Bean
    public Queue alertsDlpQueue(){
        return new Queue(properties.getAlertsDlpQueue(), true, false, false);
    }

    // 교환기 설정
    @Bean
    public DirectExchange exchange() {
        return new DirectExchange(properties.getExchange());
    }

    // 알림을 위한 교환기
    @Bean
    public DirectExchange alertsExchange(){
        return new DirectExchange(properties.getAlertsExchange());
    }

    // 바인딩 설정
    @Bean
    public Binding fileBinding(Queue fileQueue, DirectExchange exchange) {
        return BindingBuilder.bind(fileQueue).to(exchange).with(properties.getFileRoutingKey());
    }

    @Bean
    public Binding vtReportBinding(Queue vtReportQueue, DirectExchange exchange) {
        return BindingBuilder.bind(vtReportQueue).to(exchange).with(properties.getVtReportRoutingKey());
    }

    @Bean
    public Binding grmScanBinding(Queue grmScanQueue, DirectExchange exchange) {
        return BindingBuilder.bind(grmScanQueue).to(exchange).with(properties.getGrmScanRoutingKey());
    }

    @Bean
    public Binding exeScanBinding(Queue exeScanQueue, DirectExchange exchange) {
        return BindingBuilder.bind(exeScanQueue).to(exchange).with(properties.getExeScanRoutingKey());
    }

    @Bean
    public Binding imgScanBinding(Queue imgScanQueue, DirectExchange exchange) {
        return BindingBuilder.bind(imgScanQueue).to(exchange).with(properties.getImgScanRoutingKey());
    }

    @Bean
    public Binding docScanBinding(Queue docScanQueue, DirectExchange exchange) {
        return BindingBuilder.bind(docScanQueue).to(exchange).with(properties.getDocScanRoutingKey());
    }

    @Bean
    public Binding vtUploadBinding(Queue vtUploadQueue, DirectExchange exchange) {
        return BindingBuilder.bind(vtUploadQueue).to(exchange).with(properties.getVtUploadRoutingKey());
    }

    // 알림을 위한 바인딩
    @Bean
    public Binding alertsVtBinding(
            @Qualifier("alertsVtQueue") Queue alertsVtQueue,
            DirectExchange alertsExchange) {
        return BindingBuilder.bind(alertsVtQueue).to(alertsExchange).with(properties.getAlertsVtRoutingKey());
    }

    @Bean
    public Binding alertsDlpBinding(
            @Qualifier("alertsDlpQueue") Queue alertsDlpQueue,
            DirectExchange alertsExchange){
        return BindingBuilder.bind(alertsDlpQueue).to(alertsExchange).with(properties.getAlertsDlpQueue());
    }

    // RabbitTemplate 설정
    @Bean
    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {
        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);
        rabbitTemplate.setExchange(properties.getExchange());
        return rabbitTemplate;
    }

    // 알림을 위한 RabbitTemplate
    @Bean
    public RabbitTemplate alertsRabbitTemplate(ConnectionFactory connectionFactory){
        RabbitTemplate alertsRabbitTemplate = new RabbitTemplate(connectionFactory);
        alertsRabbitTemplate.setExchange(properties.getAlertsExchange());
        return alertsRabbitTemplate;
    }

}
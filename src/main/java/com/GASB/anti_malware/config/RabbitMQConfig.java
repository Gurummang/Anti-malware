package com.GASB.anti_malware.config;

import com.GASB.anti_malware.service.RabbitMQReceiveService;
import org.springframework.amqp.core.*;
import org.springframework.amqp.rabbit.annotation.EnableRabbit;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;
import org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableRabbit
public class RabbitMQConfig {

    private final RabbitMQProperties properties;

    public RabbitMQConfig(RabbitMQProperties properties) {
        this.properties = properties;
    }

    // 큐 설정
    @Bean
    public Queue fileQueue() {
        return new Queue(properties.getFileQueue(), true, false, false);
    }

    @Bean
    public Queue vtReportQueue() {
        return new Queue(properties.getVtReportQueue(), true, false, false);
    }

    @Bean
    public Queue grmScanQueue() {
        return new Queue(properties.getGrmScanQueue(), true, false, false);
    }

    @Bean
    public Queue vtUploadQueue() {
        return new Queue(properties.getVtUploadQueue(), true, false, false);
    }

    // 교환기 설정
    @Bean
    public DirectExchange exchange() {
        return new DirectExchange(properties.getExchange());
    }

    // 바인딩 설정
    @Bean
    public Binding fileBinding(Queue fileQueue, DirectExchange exchange) {
        return BindingBuilder.bind(fileQueue).to(exchange).with(properties.getFileRoutingKey());
    }

    @Bean
    public Binding vtReportBinding(Queue vtReportQueue, DirectExchange exchange) {
        return BindingBuilder.bind(vtReportQueue).to(exchange).with(properties.getVtReportRoutingKey());
    }

    @Bean
    public Binding grmScanBinding(Queue grmScanQueue, DirectExchange exchange) {
        return BindingBuilder.bind(grmScanQueue).to(exchange).with(properties.getGrmScanRoutingKey());
    }

    @Bean
    public Binding vtUploadBinding(Queue vtUploadQueue, DirectExchange exchange) {
        return BindingBuilder.bind(vtUploadQueue).to(exchange).with(properties.getVtUploadRoutingKey());
    }

    // RabbitTemplate 설정
    @Bean
    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {
        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);
        rabbitTemplate.setExchange(properties.getExchange());
        return rabbitTemplate;
    }

    // 메시지 리스너 컨테이너 설정
//    @Bean
//    public SimpleMessageListenerContainer container(ConnectionFactory connectionFactory,
//                                                    MessageListenerAdapter listenerAdapter) {
//        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
//        container.setConnectionFactory(connectionFactory);
//        container.setQueueNames(properties.getFileQueue(), properties.getVtReportQueue(), properties.getGrmScanQueue(), properties.getVtUploadQueue());
//        container.setMessageListener(listenerAdapter);
//        container.setAcknowledgeMode(AcknowledgeMode.AUTO);
//        container.setConcurrency("5-10"); // 동시 처리 가능한 메시지 리스너 수
//        return container;
//    }
//
//    @Bean
//    public MessageListenerAdapter listenerAdapter(RabbitMQReceiveService receiver) {
//        // 각 큐에 대한 메소드 라우팅
//        MessageListenerAdapter adapter = new MessageListenerAdapter(receiver);
//        adapter.setDefaultListenerMethod("handleVtReportRequest"); // 기본 메소드
//        return adapter;
//    }
}
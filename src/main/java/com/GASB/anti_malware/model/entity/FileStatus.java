package com.GASB.anti_malware.model.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
@Entity
public class FileStatus {


    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @Column(name = "file_id", unique = true) // Unique constraint
    private Long fileId;

    @JsonIgnore
    @OneToOne
    @JoinColumn(name = "file_id", referencedColumnName = "id", insertable = false, updatable = false)
    private StoredFile storedFile;

    private int gscanStatus = -1;
    private int dlpStatus = -1;
    private int vtStatus = -1;

    @Builder
    public FileStatus(Long fileId, Integer gscanStatus, Integer dlpStatus, Integer vtStatus) {
        this.fileId = fileId;
        this.gscanStatus = (gscanStatus != null) ? gscanStatus : -1;
        this.dlpStatus = (dlpStatus != null) ? dlpStatus : -1;
        this.vtStatus = (vtStatus != null) ? vtStatus : -1;
    }

    // Copy constructor
    public FileStatus(FileStatus other) {
        this.id = other.id;
        this.fileId = other.fileId;
        this.gscanStatus = other.gscanStatus;
        this.dlpStatus = other.dlpStatus;
        this.vtStatus = other.vtStatus;
        // Deep copy of associated StoredFile if necessary
        this.storedFile = other.storedFile != null ? new StoredFile(other.storedFile) : null;
    }

    // Safe setter for mutable storedFile
    public void setStoredFile(StoredFile storedFile) {
        this.storedFile = storedFile != null ? new StoredFile(storedFile) : null; // Store a copy
    }

    // Safe access to mutable storedFile
    public StoredFile getStoredFile() {
        return storedFile != null ? new StoredFile(storedFile) : null; // Return a copy
    }
}

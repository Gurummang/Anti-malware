package com.GASB.anti_malware.model.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;

import java.sql.Timestamp;

@Getter
@Setter
@NoArgsConstructor
@Entity
public class StoredFile {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @Column(columnDefinition = "TEXT", nullable = false)
    private String saltedHash;

    private int size;
    private String type;

    @Column(columnDefinition = "TEXT", nullable = false)
    private String savePath;

    @JsonIgnore
    @OneToOne(mappedBy = "storedFile", cascade = CascadeType.ALL)
    private VtReport vtReport;

    @JsonIgnore
    @OneToOne(mappedBy = "storedFile", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private FileStatus fileStatus;

    @JsonIgnore
    @OneToOne(mappedBy = "storedFile", cascade = CascadeType.ALL)
    private ScanTable scanTable;

    @Builder
    public StoredFile(long id, String saltedHash, int size, String type, String savePath) {
        this.id = id;
        this.saltedHash = saltedHash;
        this.size = size;
        this.type = type;
        this.savePath = savePath;
    }

    // Copy constructor
    public StoredFile(StoredFile other) {
        this.id = other.id;
        this.saltedHash = other.saltedHash;
        this.size = other.size;
        this.type = other.type;
        this.savePath = other.savePath;
        // Deep copy of related entities if necessary
        this.vtReport = other.vtReport != null ? new VtReport(other.vtReport) : null;
        this.fileStatus = other.fileStatus != null ? new FileStatus(other.fileStatus) : null;
        this.scanTable = other.scanTable != null ? new ScanTable(other.scanTable) : null;
    }

    // Safe access to mutable fileStatus
    public FileStatus getFileStatus() {
        return fileStatus != null ? new FileStatus(fileStatus) : null; // Return a copy
    }

    // Safe access to mutable fileStatus
    public ScanTable getScanTable() {
        return scanTable != null ? new ScanTable(scanTable) : null; // Return a copy
    }

    // Safe access to mutable fileStatus
    public VtReport getVtReport() {
        return vtReport != null ? new VtReport(vtReport) : null; // Return a copy
    }
}


package com.GASB.anti_malware.model.dto.response;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;
import org.springframework.http.HttpStatus;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Getter
@Setter
@Builder
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ResponseDto<T> {
    private String status;
    private Long file_id;
    private String message;
    private T data;

    @Getter
    @Setter
    @Builder
    public static class FileListResponse {
        private int total;
        private int malwareTotal;
        private List<FileListDto> files;

        // Constructor that uses defensive copying for mutable fields
        public FileListResponse(int total, int malwareTotal, List<FileListDto> files) {
            this.total = total;
            this.malwareTotal = malwareTotal;
            this.files = files != null ? new ArrayList<>(files) : Collections.emptyList(); // Defensive copy
        }

        public List<FileListDto> getFiles() {
            return Collections.unmodifiableList(files); // Return an unmodifiable view
        }

        public static FileListResponse of(int total, int malwareTotal, List<FileListDto> files) {
            return new FileListResponse(total, malwareTotal, files);
        }
    }


    public static <T> ResponseDto<T> ofSuccess() {
        return ResponseDto.<T>builder()
                .status("success")
                .build();
    }

    public static <T> ResponseDto<T> ofSuccess(Long file_id, T data) {
        return ResponseDto.<T>builder()
                .status("success")
                .file_id(file_id)
                .data(data)
                .build();
    }

    public static <T> ResponseDto<T> ofSuccess(T data) {
        return ResponseDto.<T>builder()
                .status("success")
                .data(data)
                .build();
    }

    public static <T> ResponseDto<T> ofFail(String message) {
        return ResponseDto.<T>builder()
                .status("error")
                .message(message)
                .build();
    }

    public static <T> ResponseDto<T> ofFail(Long file_id, String message) {
        return ResponseDto.<T>builder()
                .status("error")
                .file_id(file_id)
                .message(message)
                .build();
    }
}

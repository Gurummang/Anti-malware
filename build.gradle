plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id "com.github.spotbugs" version "6.0.19"
}

group = 'com.GASB'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.apache.tika:tika-core:2.7.0'
	implementation 'com.squareup.okhttp3:okhttp'
	implementation 'org.modelmapper:modelmapper:3.0.0'
	implementation 'software.amazon.awssdk:s3:2.20.0'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// spotbugs
	spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
}

// spotbugs plugins
spotbugs {
	toolVersion = '4.8.6'
	ignoreFailures = true
}
tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {
	reports {
		xml.required.set(false)
		html.required.set(true)
		html.outputLocation.set(layout.buildDirectory.file("reports/spotbugs/main.html"))
		html.stylesheet = 'fancy-hist.xsl'
	}
	jvmArgs = ['--add-opens', 'java.base/java.lang=ALL-UNNAMED', '--add-opens', 'java.base/java.util=ALL-UNNAMED']
}

tasks.named('test') {
	useJUnitPlatform()
}
